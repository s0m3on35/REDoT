# modules/exploits/soap_action_fuzzer.py

import requests
import argparse
import random
import string
import json
import os
from datetime import datetime

LOG_PATH = "results/exploit_logs.json"
MITRE_TTP = "T1220"  # XSL Script Processing

def log_event(entry):
    os.makedirs("results", exist_ok=True)
    if os.path.exists(LOG_PATH):
        with open(LOG_PATH, "r") as f:
            data = json.load(f)
    else:
        data = []
    data.append(entry)
    with open(LOG_PATH, "w") as f:
        json.dump(data, f, indent=2)

def random_soap_action():
    return ''.join(random.choices(string.ascii_letters + string.digits + "/:._-", k=20))

def fuzz(target_url, iterations, stealth):
    print(f"[✓] Starting SOAPAction fuzzing on {target_url}")
    for i in range(iterations):
        action = random_soap_action()
        headers = {
            "SOAPAction": action,
            "Content-Type": "text/xml"
        }
        payload = f"""<?xml version="1.0"?>
        <soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
          <soap:Body>
            <fuzz>{action}</fuzz>
          </soap:Body>
        </soap:Envelope>"""

        try:
            response = requests.post(target_url, headers=headers, data=payload, timeout=5)
            if not stealth:
                print(f"[{i+1}] Action: {action} → Status: {response.status_code}")

            log_event({
                "timestamp": datetime.utcnow().isoformat(),
                "target_url": target_url,
                "soap_action": action,
                "ttp": MITRE_TTP,
                "status_code": response.status_code
            })

        except Exception as e:
            if not stealth:
                print(f"[!] Error on action {action}: {e}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="SOAPAction Fuzzer")
    parser.add_argument("--target", required=True, help="Target SOAP endpoint URL")
    parser.add_argument("--iterations", type=int, default=20, help="Number of SOAP actions to send")
    parser.add_argument("--stealth", action="store_true", help="Suppress output")
    args = parser.parse_args()
    
    fuzz(args.target, args.iterations, args.stealth)
