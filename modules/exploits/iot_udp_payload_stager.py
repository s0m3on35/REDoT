# modules/exploits/iot_udp_payload_stager.py

import argparse
import socket
import time
import os
import json
from datetime import datetime

LOG_PATH = "results/exploit_logs.json"
MITRE_TTP = "T1203"  # Exploitation for Client Execution

def log_event(entry):
    os.makedirs("results", exist_ok=True)
    if os.path.exists(LOG_PATH):
        with open(LOG_PATH) as f:
            data = json.load(f)
    else:
        data = []
    data.append(entry)
    with open(LOG_PATH, "w") as f:
        json.dump(data, f, indent=2)

def send_payload(ip, port, payload, repeat, delay):
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    for i in range(repeat):
        try:
            sock.sendto(payload.encode(), (ip, port))
            print(f"[âœ“] Sent UDP payload to {ip}:{port} ({i+1}/{repeat})")
            time.sleep(delay)
        except Exception as e:
            print(f"[!] Failed to send: {e}")
    sock.close()

    log_event({
        "timestamp": datetime.utcnow().isoformat(),
        "target_ip": ip,
        "target_port": port,
        "payload": payload,
        "repeat": repeat,
        "delay": delay,
        "ttp": MITRE_TTP
    })

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="IoT UDP Payload Stager")
    parser.add_argument("--ip", required=True, help="Target IoT device IP")
    parser.add_argument("--port", type=int, required=True, help="UDP port (e.g., 5683, 1900)")
    parser.add_argument("--payload", required=True, help="Payload string to send")
    parser.add_argument("--repeat", type=int, default=3)
    parser.add_argument("--delay", type=float, default=1.0)
    args = parser.parse_args()

    send_payload(args.ip, args.port, args.payload, args.repeat, args.delay)
