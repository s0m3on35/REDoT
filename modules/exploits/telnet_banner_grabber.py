# modules/exploits/telnet_banner_grabber.py

import socket
import argparse
from datetime import datetime
import json
import os

LOG_PATH = "results/exploit_logs.json"
MITRE_TTP = "T1040"  # Network Sniffing / Recon

def log_event(entry):
    os.makedirs("results", exist_ok=True)
    if os.path.exists(LOG_PATH):
        with open(LOG_PATH, "r") as f:
            data = json.load(f)
    else:
        data = []
    data.append(entry)
    with open(LOG_PATH, "w") as f:
        json.dump(data, f, indent=2)

def grab_telnet_banner(host, port=23, timeout=5):
    try:
        with socket.create_connection((host, port), timeout=timeout) as sock:
            sock.settimeout(3)
            banner = sock.recv(1024).decode(errors="ignore")
            print(f"[âœ“] Banner from {host}:{port}:\n{banner.strip()}")

            log_event({
                "timestamp": datetime.utcnow().isoformat(),
                "host": host,
                "port": port,
                "banner": banner.strip(),
                "ttp": MITRE_TTP
            })

    except Exception as e:
        print(f"[!] Connection failed: {e}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Telnet Banner Grabber")
    parser.add_argument("--host", required=True, help="Target IP or hostname")
    parser.add_argument("--port", type=int, default=23, help="Telnet port (default: 23)")
    args = parser.parse_args()

    grab_telnet_banner(args.host, args.port)
