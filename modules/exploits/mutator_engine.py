# modules/exploits/mutator_engine.py

import argparse
import base64
import random
import string
import json
import os
from datetime import datetime

LOG_PATH = "results/mutation_logs.json"
MITRE_TTP = "T1027"  # Obfuscated Files or Information

def log_mutation(entry):
    os.makedirs("results", exist_ok=True)
    if os.path.exists(LOG_PATH):
        with open(LOG_PATH, "r") as f:
            data = json.load(f)
    else:
        data = []
    data.append(entry)
    with open(LOG_PATH, "w") as f:
        json.dump(data, f, indent=2)

def randomize_var_names(code):
    words = list(set(code.split()))
    var_map = {}
    for word in words:
        if word.isidentifier() and not word.startswith("__"):
            var_map[word] = ''.join(random.choices(string.ascii_letters, k=8))
    for orig, new in var_map.items():
        code = code.replace(orig, new)
    return code

def reorder_lines(code):
    lines = code.split('\n')
    body = [l for l in lines if l.strip() and not l.strip().startswith("#")]
    random.shuffle(body)
    return "\n".join(body)

def encode_payload(code, encoding_type):
    if encoding_type == "base64":
        encoded = base64.b64encode(code.encode()).decode()
        return f"import base64\nexec(base64.b64decode('{encoded}'))"
    elif encoding_type == "rot13":
        return f"exec(''.join([chr(((ord(c)-97+13)%26)+97) if c.isalpha() else c for c in '{code.lower()}']))"
    return code

def mutate_payload(payload_path, output_path, mode, encoding):
    with open(payload_path, "r") as f:
        code = f.read()

    original = code
    if mode == "randomize":
        code = randomize_var_names(code)
    elif mode == "shuffle":
        code = reorder_lines(code)

    if encoding:
        code = encode_payload(code, encoding)

    with open(output_path, "w") as f:
        f.write(code)

    log_mutation({
        "timestamp": datetime.utcnow().isoformat(),
        "original_file": payload_path,
        "mutated_file": output_path,
        "mode": mode,
        "encoding": encoding,
        "ttp": MITRE_TTP
    })

    print(f"[✓] Payload mutated → {output_path}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="REDoT Payload Morphing & Mutation Engine")
    parser.add_argument("--payload", required=True, help="Path to original payload script")
    parser.add_argument("--output", required=True, help="Path to save mutated output")
    parser.add_argument("--mode", choices=["randomize", "shuffle"], default="randomize", help="Mutation mode")
    parser.add_argument("--encoding", choices=["base64", "rot13", "none"], default="base64", help="Encoding method")
    args = parser.parse_args()

    mutate_payload(args.payload, args.output, args.mode, None if args.encoding == "none" else args.encoding)
