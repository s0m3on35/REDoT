# modules/exploits/attack_timeline_builder.py

import os
import json
from datetime import datetime
from collections import defaultdict

LOG_PATH = "results/exploit_logs.json"
TIMELINE_OUT = "results/attack_timeline.json"

def build_timeline(log_file=LOG_PATH, output_file=TIMELINE_OUT):
    if not os.path.exists(log_file):
        print("[!] No logs found to process.")
        return

    with open(log_file, "r") as f:
        logs = json.load(f)

    timeline = defaultdict(list)
    for entry in logs:
        timestamp = entry.get("timestamp", "")
        ttp = entry.get("ttp", "Unknown")
        description = summarize_entry(entry)
        timeline[ttp].append({
            "timestamp": timestamp,
            "description": description
        })

    structured = []
    for ttp, events in timeline.items():
        structured.append({
            "TTP": ttp,
            "events": sorted(events, key=lambda x: x['timestamp'])
        })

    with open(output_file, "w") as f:
        json.dump(structured, f, indent=2)

    print(f"[âœ“] Attack timeline generated: {output_file}")

def summarize_entry(entry):
    parts = []
    if "control_url" in entry:
        parts.append(f"UPnP Punch to {entry['internal_ip']}:{entry['internal_port']}")
    if "broker" in entry:
        parts.append(f"MQTT to {entry['topic']}")
    if "file" in entry:
        parts.append(f"File action on {entry['file']}")
    if "target_ip" in entry:
        parts.append(f"Target {entry['target_ip']}")
    return ", ".join(parts) or "Uncategorized action"

if __name__ == "__main__":
    build_timeline()
