# modules/exploits/laser_pointer_overdrive.py

import argparse
import time
import serial
import json
import os
from datetime import datetime

LOG_PATH = "results/exploit_logs.json"
MITRE_TTP = "T1601"  # Modify System Image (via firmware override)

def log_laser_event(entry):
    os.makedirs("results", exist_ok=True)
    if os.path.exists(LOG_PATH):
        with open(LOG_PATH, "r") as f:
            data = json.load(f)
    else:
        data = []
    data.append(entry)
    with open(LOG_PATH, "w") as f:
        json.dump(data, f, indent=2)

def fire_laser_loop(serial_port, rate, duration):
    try:
        ser = serial.Serial(serial_port, 9600, timeout=1)
        print(f"[âœ“] Connected to laser controller at {serial_port}")
        end_time = time.time() + duration
        while time.time() < end_time:
            ser.write(b"FIRE\n")
            print("[+] Laser pulse sent")
            time.sleep(rate)
        ser.close()
    except Exception as e:
        print(f"[!] Serial error: {e}")
    
    log_laser_event({
        "timestamp": datetime.utcnow().isoformat(),
        "serial_port": serial_port,
        "rate": rate,
        "duration": duration,
        "ttp": MITRE_TTP
    })

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Laser Pointer Overdrive Loop")
    parser.add_argument("--port", required=True, help="Serial port of laser controller (e.g., /dev/ttyUSB0)")
    parser.add_argument("--rate", type=float, default=0.5, help="Delay between pulses (sec)")
    parser.add_argument("--duration", type=int, default=10, help="Duration of attack in seconds")
    args = parser.parse_args()

    fire_laser_loop(args.port, args.rate, args.duration)
