# modules/exploits/airgap_bridge.py

import os
import argparse
import base64
import json
import time
from datetime import datetime

BRIDGE_OUTBOX = "results/airgap_bridge/outbox/"
BRIDGE_INBOX = "results/airgap_bridge/inbox/"
LOG_PATH = "results/exploit_logs.json"
MITRE_TTP = "T1020"  # Automated Exfiltration

os.makedirs(BRIDGE_OUTBOX, exist_ok=True)
os.makedirs(BRIDGE_INBOX, exist_ok=True)

def log_event(entry):
    os.makedirs("results", exist_ok=True)
    if os.path.exists(LOG_PATH):
        with open(LOG_PATH, "r") as f:
            data = json.load(f)
    else:
        data = []
    data.append(entry)
    with open(LOG_PATH, "w") as f:
        json.dump(data, f, indent=2)

def encode_payload(file_path):
    with open(file_path, "rb") as f:
        data = base64.b64encode(f.read()).decode()
    return data

def decode_payload(encoded, output_path):
    with open(output_path, "wb") as f:
        f.write(base64.b64decode(encoded.encode()))

def exfiltrate(file_path):
    encoded = encode_payload(file_path)
    outfile = os.path.join(BRIDGE_OUTBOX, f"{os.path.basename(file_path)}.b64")
    with open(outfile, "w") as f:
        f.write(encoded)
    print(f"[✓] File encoded for airgap bridge: {outfile}")
    log_event({
        "timestamp": datetime.utcnow().isoformat(),
        "mode": "exfil",
        "source": file_path,
        "encoded_to": outfile,
        "ttp": MITRE_TTP
    })

def infiltrate(encoded_file, output_path):
    with open(encoded_file, "r") as f:
        encoded = f.read()
    decode_payload(encoded, output_path)
    print(f"[✓] File decoded from airgap bridge to: {output_path}")
    log_event({
        "timestamp": datetime.utcnow().isoformat(),
        "mode": "infil",
        "encoded_from": encoded_file,
        "decoded_to": output_path,
        "ttp": MITRE_TTP
    })

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Airgap Infil/Exfil Bridge via File Transfer")
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument("--exfil", help="Path to file to exfiltrate (encode to .b64)")
    group.add_argument("--infil", help="Path to encoded .b64 file to decode")
    parser.add_argument("--output", help="Output path for decoded file")

    args = parser.parse_args()

    if args.exfil:
        exfiltrate(args.exfil)
    elif args.infil and args.output:
        infiltrate(args.infil, args.output)
    else:
        parser.error("For infiltration, --output is required.")
