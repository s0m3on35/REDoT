# modules/exploits/firmware_dropper.py

import argparse
import os
import shutil
import hashlib
import time
from datetime import datetime
import json

DROP_PATH = "results/firmware_drops/"
LOG_PATH = "results/exploit_logs.json"
MITRE_TTP = "T1542.001"  # Pre-OS Boot: System Firmware

os.makedirs(DROP_PATH, exist_ok=True)

def log_drop(entry):
    os.makedirs("results", exist_ok=True)
    if os.path.exists(LOG_PATH):
        with open(LOG_PATH, "r") as f:
            data = json.load(f)
    else:
        data = []
    data.append(entry)
    with open(LOG_PATH, "w") as f:
        json.dump(data, f, indent=2)

def calculate_hash(file_path):
    h = hashlib.sha256()
    with open(file_path, "rb") as f:
        while chunk := f.read(8192):
            h.update(chunk)
    return h.hexdigest()

def drop_firmware(source, target_name, stealth):
    timestamp = datetime.utcnow().isoformat()
    target_path = os.path.join(DROP_PATH, target_name)

    try:
        shutil.copy2(source, target_path)
        sha256 = calculate_hash(target_path)

        if not stealth:
            print(f"[âœ“] Firmware dropped to: {target_path}")
            print(f"[i] SHA256: {sha256}")

        log_drop({
            "timestamp": timestamp,
            "source_file": source,
            "dropped_to": target_path,
            "hash": sha256,
            "stealth": stealth,
            "ttp": MITRE_TTP
        })

    except Exception as e:
        print(f"[!] Firmware drop failed: {e}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="In-field Firmware Dropper")
    parser.add_argument("--source", required=True, help="Source firmware file path")
    parser.add_argument("--target", required=True, help="Target filename for drop")
    parser.add_argument("--stealth", action="store_true", help="Quiet mode, no output")

    args = parser.parse_args()
    drop_firmware(args.source, args.target, args.stealth)
