# modules/exploits/voip_exfiltrator.py

import argparse
import os
import pyshark
import datetime
import json

OUTPUT_DIR = "results/voip"
LOG_FILE = "results/exploit_logs.json"
MITRE_TTP = "T1056.003"  # Capture Audio

def ensure_dirs():
    os.makedirs(OUTPUT_DIR, exist_ok=True)
    os.makedirs("results", exist_ok=True)

def log_event(entry):
    if os.path.exists(LOG_FILE):
        with open(LOG_FILE, "r") as f:
            logs = json.load(f)
    else:
        logs = []
    logs.append(entry)
    with open(LOG_FILE, "w") as f:
        json.dump(logs, f, indent=2)

def capture_voip(pcap_file, sip_filter="sip"):
    print(f"[+] Parsing PCAP: {pcap_file}")
    capture = pyshark.FileCapture(pcap_file, display_filter=sip_filter)

    calls_found = 0
    for pkt in capture:
        try:
            if "sip" in pkt:
                src = pkt.ip.src
                dst = pkt.ip.dst
                method = pkt.sip.Method
                print(f"[âœ“] SIP Call: {method} from {src} to {dst}")
                calls_found += 1
        except Exception:
            continue

    capture.close()

    log_event({
        "timestamp": datetime.datetime.utcnow().isoformat(),
        "source": pcap_file,
        "calls_found": calls_found,
        "ttp": MITRE_TTP
    })

    print(f"[+] Done. Found {calls_found} call(s).")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="VoIP Exfiltrator via SIP Analysis")
    parser.add_argument("--pcap", required=True, help="PCAP file with SIP/RTP traffic")
    args = parser.parse_args()
    ensure_dirs()
    capture_voip(args.pcap)
