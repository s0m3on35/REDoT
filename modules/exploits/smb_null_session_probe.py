# modules/exploits/smb_null_session_probe.py

import argparse
from impacket.smbconnection import SMBConnection
import json
import os
from datetime import datetime

LOG_PATH = "results/exploit_logs.json"
MITRE_TTP = "T1135"  # Network Share Discovery

def log_result(entry):
    os.makedirs("results", exist_ok=True)
    if os.path.exists(LOG_PATH):
        with open(LOG_PATH, 'r') as f:
            data = json.load(f)
    else:
        data = []
    data.append(entry)
    with open(LOG_PATH, 'w') as f:
        json.dump(data, f, indent=2)

def probe_target(ip):
    try:
        smb = SMBConnection(ip, ip, sess_port=445)
        smb.login("", "")  # Null session
        shares = smb.listShares()
        results = []
        for share in shares:
            results.append({
                "name": share['shi1_netname'].decode().strip(),
                "type": share['shi1_type'],
                "comment": share['shi1_remark'].decode().strip()
            })
        log_result({
            "timestamp": datetime.utcnow().isoformat(),
            "target": ip,
            "shares": results,
            "ttp": MITRE_TTP,
            "success": True
        })
        for s in results:
            print(f"[âœ“] Share: {s['name']} - {s['comment']}")
    except Exception as e:
        log_result({
            "timestamp": datetime.utcnow().isoformat(),
            "target": ip,
            "error": str(e),
            "ttp": MITRE_TTP,
            "success": False
        })
        print(f"[!] Failed to connect: {e}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="SMB Null Session Share Enumerator")
    parser.add_argument("--target", required=True, help="Target IP address")
    args = parser.parse_args()
    probe_target(args.target)
