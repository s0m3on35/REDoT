# auto

import argparse
import miniupnpc
import json
import os
from datetime import datetime

LOG_FILE = "results/upnp_punch_log.json"
MITRE_TTP = "T1210"  # Exploitation of Remote Services

def punch_port(description, internal_port, external_port, proto="TCP"):
    upnp = miniupnpc.UPnP()
    upnp.discoverdelay = 200
    upnp.discover()
    upnp.selectigd()

    internal_ip = upnp.lanaddr
    print(f"[âœ“] Internal IP: {internal_ip}")
    upnp.addportmapping(external_port, proto, internal_ip, internal_port, description, '')

    print(f"[+] Port {external_port}/{proto} forwarded to {internal_ip}:{internal_port}")

    log_entry = {
        "timestamp": datetime.utcnow().isoformat(),
        "external_port": external_port,
        "internal_ip": internal_ip,
        "internal_port": internal_port,
        "protocol": proto,
        "desc": description,
        "ttp": MITRE_TTP
    }

    os.makedirs("results", exist_ok=True)
    if os.path.exists(LOG_FILE):
        with open(LOG_FILE, "r") as f:
            data = json.load(f)
    else:
        data = []

    data.append(log_entry)
    with open(LOG_FILE, "w") as f:
        json.dump(data, f, indent=2)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Punch hole in router via UPNP")
    parser.add_argument("--internal-port", type=int, required=True, help="Internal service port")
    parser.add_argument("--external-port", type=int, required=True, help="Public port to expose")
    parser.add_argument("--proto", default="TCP", help="Protocol (TCP or UDP)")
    parser.add_argument("--desc", default="REDoT Port Punch", help="Description for mapping")
    args = parser.parse_args()

    punch_port(args.desc, args.internal_port, args.external_port, args.proto.upper())
