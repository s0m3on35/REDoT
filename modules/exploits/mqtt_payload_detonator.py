# modules/exploits/mqtt_payload_detonator.py

import argparse
import time
import os
import json
from datetime import datetime
import paho.mqtt.client as mqtt

LOG_PATH = "results/exploit_logs.json"
MITRE_TTP = "T1027"  # Obfuscated Files or Information

def log_publish(entry):
    os.makedirs("results", exist_ok=True)
    if os.path.exists(LOG_PATH):
        with open(LOG_PATH, "r") as f:
            data = json.load(f)
    else:
        data = []
    data.append(entry)
    with open(LOG_PATH, "w") as f:
        json.dump(data, f, indent=2)

def publish_payload(broker, topic, payload, qos, delay, repeat, stealth):
    client = mqtt.Client()
    try:
        client.connect(broker)
    except Exception as e:
        print(f"[!] MQTT connection failed: {e}")
        return

    for i in range(repeat):
        try:
            client.publish(topic, payload, qos=qos)
            print(f"[âœ“] Payload published to {topic} (repeat {i+1}/{repeat})")
            time.sleep(delay)
        except Exception as e:
            if not stealth:
                print(f"[!] Failed to publish: {e}")

    log_publish({
        "timestamp": datetime.utcnow().isoformat(),
        "broker": broker,
        "topic": topic,
        "payload": payload,
        "qos": qos,
        "repeat": repeat,
        "stealth": stealth,
        "ttp": MITRE_TTP
    })

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MQTT Payload Detonator")
    parser.add_argument("--broker", required=True, help="MQTT broker (IP or hostname)")
    parser.add_argument("--topic", required=True, help="Target MQTT topic")
    parser.add_argument("--payload", required=True, help="Message payload to send")
    parser.add_argument("--qos", type=int, default=0, help="MQTT QoS level (0-2)")
    parser.add_argument("--repeat", type=int, default=1, help="Number of times to publish")
    parser.add_argument("--delay", type=float, default=1.0, help="Delay between publishes")
    parser.add_argument("--stealth", action="store_true")
    args = parser.parse_args()

    publish_payload(args.broker, args.topic, args.payload, args.qos, args.delay, args.repeat, args.stealth)
